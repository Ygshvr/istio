diff --git a/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go b/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go
deleted file mode 100644
index c3db96fdd8..0000000000
--- a/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go
+++ /dev/null
@@ -1,377 +0,0 @@
-// Copyright Istio Authors. All Rights Reserved.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package stackdriver
-
-import (
-	"errors"
-	"fmt"
-	"io/ioutil"
-	"net/http"
-	"strings"
-	"testing"
-	"time"
-
-	"cloud.google.com/go/compute/metadata"
-	"github.com/golang/protobuf/jsonpb"
-	"github.com/golang/protobuf/proto"
-	loggingpb "google.golang.org/genproto/googleapis/logging/v2"
-	monitoring "google.golang.org/genproto/googleapis/monitoring/v3"
-
-	"istio.io/istio/pkg/config/protocol"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/echoboot"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/components/stackdriver"
-	edgespb "istio.io/istio/pkg/test/framework/components/stackdriver/edges"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-	"istio.io/istio/pkg/test/util/retry"
-	"istio.io/istio/pkg/test/util/tmpl"
-)
-
-const (
-	stackdriverBootstrapOverride = "testdata/custom_bootstrap.yaml.tmpl"
-	serverRequestCount           = "testdata/server_request_count.json.tmpl"
-	clientRequestCount           = "testdata/client_request_count.json.tmpl"
-	serverLogEntry               = "testdata/server_access_log.json.tmpl"
-	trafficAssertionTmpl         = "testdata/traffic_assertion.json.tmpl"
-	sdBootstrapConfigMap         = "stackdriver-bootstrap-config"
-
-	projectsPrefix = "projects/test-project"
-)
-
-var (
-	ist        istio.Instance
-	echoNsInst namespace.Instance
-	sdInst     stackdriver.Instance
-	srv        echo.Instance
-	clt        echo.Instance
-)
-
-func getIstioInstance() *istio.Instance {
-	return &ist
-}
-
-func getEchoNamespaceInstance() namespace.Instance {
-	return echoNsInst
-}
-
-func unmarshalFromTemplateFile(file string, out proto.Message) error {
-	templateFile, err := ioutil.ReadFile(file)
-	if err != nil {
-		return err
-	}
-	resource, err := tmpl.Evaluate(string(templateFile), map[string]interface{}{
-		"EchoNamespace": getEchoNamespaceInstance().Name(),
-		"OnGCE":         metadata.OnGCE(),
-	})
-	if err != nil {
-		return err
-	}
-	return jsonpb.UnmarshalString(resource, out)
-}
-
-// TODO: add test for log, trace and edge.
-// TestStackdriverMonitoring verifies that stackdriver WASM filter exports metrics with expected labels.
-func TestStackdriverMonitoring(t *testing.T) {
-	framework.NewTest(t).
-		Run(func(ctx framework.TestContext) {
-			retry.UntilSuccessOrFail(t, func() error {
-				if err := sendTraffic(t); err != nil {
-					return fmt.Errorf("could not generate traffic: %v", err)
-				}
-				if err := validateMetrics(t, serverRequestCount, clientRequestCount); err != nil {
-					return err
-				}
-				if err := validateLogs(t, serverLogEntry); err != nil {
-					return err
-				}
-				if err := validateTraces(t); err != nil {
-					return err
-				}
-				if err := validateEdges(t); err != nil {
-					return err
-				}
-				return nil
-			}, retry.Delay(10*time.Second), retry.Timeout(40*time.Second))
-		})
-}
-
-func TestMain(m *testing.M) {
-	framework.NewSuite(m).
-		RequireSingleCluster().
-		Label(label.CustomSetup).
-		Setup(istio.Setup(getIstioInstance(), setupConfig)).
-		Setup(testSetup).
-		Run()
-}
-
-func setupConfig(cfg *istio.Config) {
-	if cfg == nil {
-		return
-	}
-	cfg.ControlPlaneValues = `
-meshConfig:
-  enableTracing: true
-values:
-  telemetry:
-    v2:
-      stackdriver:
-        configOverride:
-          meshEdgesReportingDuration: "5s"
-          enable_mesh_edges_reporting: true
-`
-	// enable stackdriver filter
-	cfg.Values["telemetry.v2.stackdriver.enabled"] = "true"
-	cfg.Values["telemetry.v2.stackdriver.logging"] = "true"
-	cfg.Values["telemetry.v2.stackdriver.topology"] = "true"
-	cfg.Values["global.proxy.tracer"] = "stackdriver"
-	cfg.Values["pilot.traceSampling"] = "100"
-	cfg.Values["telemetry.v2.accessLogPolicy.enabled"] = "true"
-}
-
-func testSetup(ctx resource.Context) (err error) {
-	echoNsInst, err = namespace.New(ctx, namespace.Config{
-		Prefix: "istio-echo",
-		Inject: true,
-	})
-	if err != nil {
-		return
-	}
-
-	sdInst, err = stackdriver.New(ctx, stackdriver.Config{})
-	if err != nil {
-		return
-	}
-	templateBytes, err := ioutil.ReadFile(stackdriverBootstrapOverride)
-	if err != nil {
-		return
-	}
-	sdBootstrap, err := tmpl.Evaluate(string(templateBytes), map[string]interface{}{
-		"StackdriverNamespace": sdInst.GetStackdriverNamespace(),
-		"EchoNamespace":        getEchoNamespaceInstance().Name(),
-	})
-	if err != nil {
-		return
-	}
-
-	err = ctx.Config().ApplyYAML(echoNsInst.Name(), sdBootstrap)
-	if err != nil {
-		return
-	}
-	err = echoboot.NewBuilder(ctx).
-		With(&clt, echo.Config{
-			Service:   "clt",
-			Namespace: getEchoNamespaceInstance(),
-			Subsets: []echo.SubsetConfig{
-				{
-					Annotations: map[echo.Annotation]*echo.AnnotationValue{
-						echo.SidecarBootstrapOverride: {
-							Value: sdBootstrapConfigMap,
-						},
-					},
-				},
-			}}).
-		With(&srv, echo.Config{
-			Service:   "srv",
-			Namespace: getEchoNamespaceInstance(),
-			Ports: []echo.Port{
-				{
-					Name:     "grpc",
-					Protocol: protocol.GRPC,
-					// We use a port > 1024 to not require root
-					InstancePort: 7070,
-				},
-				{
-					Name:     "http",
-					Protocol: protocol.HTTP,
-					// We use a port > 1024 to not require root
-					InstancePort: 8888,
-				},
-				{
-					Name:     "tcp",
-					Protocol: protocol.TCP,
-					// We use a port > 1024 to not require root
-					InstancePort: 9000,
-				},
-			},
-			Subsets: []echo.SubsetConfig{
-				{
-					Annotations: map[echo.Annotation]*echo.AnnotationValue{
-						echo.SidecarBootstrapOverride: {
-							Value: sdBootstrapConfigMap,
-						},
-					},
-				},
-			}}).
-		Build()
-	if err != nil {
-		return
-	}
-	return nil
-}
-
-// send both a grpc and http requests (http with forced tracing).
-func sendTraffic(t *testing.T) error {
-	t.Helper()
-	grpcOpts := echo.CallOptions{
-		Target:   srv,
-		PortName: "grpc",
-		Count:    1,
-	}
-	if _, err := clt.Call(grpcOpts); err != nil {
-		return err
-	}
-
-	// an HTTP request with forced tracing
-	hdr := http.Header{}
-	httpOpts := echo.CallOptions{
-		Target:   srv,
-		PortName: "http",
-		Headers:  hdr,
-		Count:    1,
-	}
-	_, err := clt.Call(httpOpts)
-	return err
-}
-
-func validateMetrics(t *testing.T, serverReqCount, clientReqCount string) error {
-	t.Helper()
-
-	var wantClient, wantServer monitoring.TimeSeries
-	if err := unmarshalFromTemplateFile(serverReqCount, &wantServer); err != nil {
-		return fmt.Errorf("metrics: error generating wanted server request: %v", err)
-	}
-	if err := unmarshalFromTemplateFile(clientReqCount, &wantClient); err != nil {
-		return fmt.Errorf("metrics: error generating wanted client request: %v", err)
-	}
-
-	// Traverse all time series received and compare with expected client and server time series.
-	ts, err := sdInst.ListTimeSeries()
-	if err != nil {
-		return fmt.Errorf("metrics: error getting time-series from Stackdriver: %v", err)
-	}
-
-	t.Logf("number of timeseries: %v", len(ts))
-	var gotServer, gotClient bool
-	for _, tt := range ts {
-		if proto.Equal(tt, &wantServer) {
-			gotServer = true
-		}
-		if proto.Equal(tt, &wantClient) {
-			gotClient = true
-		}
-	}
-	if !(gotServer && gotClient) {
-		return fmt.Errorf("metrics: did not get expected metrics; server = %t, client = %t", gotServer, gotClient)
-	}
-	return nil
-}
-
-func validateLogs(t *testing.T, srvLogEntry string) error {
-	t.Helper()
-
-	var wantLog loggingpb.LogEntry
-	if err := unmarshalFromTemplateFile(srvLogEntry, &wantLog); err != nil {
-		return fmt.Errorf("logs: failed to parse wanted log entry: %v", err)
-	}
-	// Traverse all log entries received and compare with expected server log entry.
-	entries, err := sdInst.ListLogEntries()
-	if err != nil {
-		return fmt.Errorf("logs: failed to get received log entries: %v", err)
-	}
-	for _, l := range entries {
-		if proto.Equal(l, &wantLog) {
-			return nil
-		}
-	}
-
-	return errors.New("logs: did not get expected log entry")
-}
-
-func validateEdges(t *testing.T) error {
-	t.Helper()
-
-	var wantEdge edgespb.TrafficAssertion
-	if err := unmarshalFromTemplateFile(trafficAssertionTmpl, &wantEdge); err != nil {
-		return fmt.Errorf("edges: failed to build wanted traffic assertion: %v", err)
-	}
-	edges, err := sdInst.ListTrafficAssertions()
-	if err != nil {
-		return fmt.Errorf("edges: failed to get traffic assertions from Stackdriver: %v", err)
-	}
-	for _, edge := range edges {
-		edge.Destination.Uid = ""
-		edge.Destination.ClusterName = ""
-		edge.Destination.Location = ""
-		edge.Source.Uid = ""
-		edge.Source.ClusterName = ""
-		edge.Source.Location = ""
-		t.Logf("edge: %v", edge)
-		if proto.Equal(edge, &wantEdge) {
-			return nil
-		}
-	}
-	return errors.New("edges: did not get expected traffic assertion")
-}
-
-func validateTraces(t *testing.T) error {
-	t.Helper()
-
-	// we are looking for a trace that looks something like:
-	//
-	// project_id:"projects/test-project"
-	// trace_id:"99bc9a02417c12c4877e19a4172ae11a"
-	// spans:{
-	//   span_id:440543054939690778
-	//   name:"projects/test-project/traces/99bc9a02417c12c4877e19a4172ae11a/spans/061d1f9309f2171a"
-	//   start_time:{seconds:1594418699  nanos:648039133}
-	//   end_time:{seconds:1594418699  nanos:669864006}
-	//   parent_span_id:18050098903530484457
-	//   labels:{
-	//     key:"span"
-	//     value:"srv.istio-echo-1-92573.svc.cluster.local:80/*"
-	//   }
-	// }
-	//
-	// we only need to validate the span value in the labels and project_id for
-	// the purposes of this test at the moment.
-	//
-	// future improvements include adding canonical service info, etc. in the
-	// span.
-
-	wantSpanLabel := fmt.Sprintf("srv.%s.svc.cluster.local:80/*", getEchoNamespaceInstance().Name())
-	traces, err := sdInst.ListTraces()
-	if err != nil {
-		return fmt.Errorf("traces: could not retrieve traces from Stackdriver: %v", err)
-	}
-	for _, trace := range traces {
-		t.Logf("trace: %v\n", trace)
-		if trace.ProjectId != projectsPrefix {
-			continue
-		}
-		for _, span := range trace.Spans {
-			if !strings.HasPrefix(span.Name, projectsPrefix) {
-				continue
-			}
-			if got, ok := span.Labels["span"]; ok && got == wantSpanLabel {
-				return nil
-			}
-		}
-	}
-	return errors.New("traces: could not find expected trace")
-}
diff --git a/tests/integration/telemetry/stackdriver/stackdriver_tcp_filter_test.go b/tests/integration/telemetry/stackdriver/stackdriver_tcp_filter_test.go
deleted file mode 100644
index 71a26681a0..0000000000
--- a/tests/integration/telemetry/stackdriver/stackdriver_tcp_filter_test.go
+++ /dev/null
@@ -1,54 +0,0 @@
-// Copyright Istio Authors. All Rights Reserved.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package stackdriver
-
-import (
-	"testing"
-	"time"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/util/retry"
-)
-
-const (
-	tcpServerConnectionCount = "testdata/server_tcp_connection_count.json.tmpl"
-	tcpClientConnectionCount = "testdata/client_tcp_connection_count.json.tmpl"
-	tcpServerLogEntry        = "testdata/tcp_server_access_log.json.tmpl"
-)
-
-// TestTCPStackdriverMonitoring verifies that stackdriver TCP filter works.
-func TestTCPStackdriverMonitoring(t *testing.T) {
-	framework.NewTest(t).
-		Run(func(ctx framework.TestContext) {
-			retry.UntilSuccessOrFail(t, func() error {
-				_, err := clt.Call(echo.CallOptions{
-					Target:   srv,
-					PortName: "tcp",
-					Count:    1,
-				})
-				if err != nil {
-					return err
-				}
-				if err := validateMetrics(t, tcpServerConnectionCount, tcpClientConnectionCount); err != nil {
-					return err
-				}
-				if err := validateLogs(t, tcpServerLogEntry); err != nil {
-					return err
-				}
-				return nil
-			}, retry.Delay(3*time.Second), retry.Timeout(40*time.Second))
-		})
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/client_request_count.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/client_request_count.json.tmpl
deleted file mode 100644
index 662202f716..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/client_request_count.json.tmpl
+++ /dev/null
@@ -1,37 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/client/request_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "srv",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-          "destination_port": "7070",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "srv",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "srv-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "test-mesh",
-          "request_operation": "/proto.EchoTestService/Echo",
-          "request_protocol": "grpc",
-          "response_code": "200",
-          "service_authentication_policy": "unknown",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "clt",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "clt-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    },
-    {{- if .OnGCE  }}
-    "resource": {
-       "labels": {
-          "namespace_name": "{{ .EchoNamespace }}"
-       },
-       "type": "k8s_pod"
-    }
-    {{- end }}
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/client_tcp_connection_count.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/client_tcp_connection_count.json.tmpl
deleted file mode 100644
index ce6cb6deaf..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/client_tcp_connection_count.json.tmpl
+++ /dev/null
@@ -1,35 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/client/connection_open_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "srv",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-          "destination_port": "9000",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "srv",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "srv-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "test-mesh",
-          "request_protocol": "tcp",
-          "service_authentication_policy": "unknown",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "clt",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "clt-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    },
-    {{- if .OnGCE  }}
-    "resource": {
-       "labels": {
-          "namespace_name": "{{ .EchoNamespace }}"
-       },
-       "type": "k8s_pod"
-    }
-    {{- end }}
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/custom_bootstrap.yaml.tmpl b/tests/integration/telemetry/stackdriver/testdata/custom_bootstrap.yaml.tmpl
deleted file mode 100644
index 12c058fdb8..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/custom_bootstrap.yaml.tmpl
+++ /dev/null
@@ -1,53 +0,0 @@
-apiVersion: v1
-kind: ConfigMap
-metadata:
-  name: stackdriver-bootstrap-config
-  namespace: {{ .EchoNamespace }}
-data:
-  custom_bootstrap.json: |
-    {
-      "node": {
-        "metadata": {
-          "INSECURE_STACKDRIVER_ENDPOINT": "stackdriver.{{ .StackdriverNamespace }}:8090",
-          "STACKDRIVER_MONITORING_EXPORT_INTERVAL_SECS": "10",
-          "MESH_ID": "test-mesh",
-        }
-      },
-      "tracing": {
-        "http": {
-          "name": "envoy.tracers.opencensus",
-          "typed_config": {
-            "@type": "type.googleapis.com/envoy.config.trace.v3.OpenCensusConfig",
-            "trace_config": {
-              "constant_sampler": {
-                "decision": "ALWAYS_PARENT"
-              },
-              "max_number_of_attributes": "200",
-              "max_number_of_annotations": "200",
-              "max_number_of_message_events": "200",
-              "max_number_of_links": "200"
-            },
-            "stackdriver_exporter_enabled": true,
-            "stackdriver_grpc_service": {
-              "google_grpc": {
-                "target_uri": "stackdriver.{{ .StackdriverNamespace }}.svc.cluster.local:8090",
-                "stat_prefix": "oc_stackdriver_tracer",
-              }
-            },
-            "stackdriver_project_id": "test-project",
-            "incoming_trace_context": [
-              "CLOUD_TRACE_CONTEXT",
-              "TRACE_CONTEXT",
-              "GRPC_TRACE_BIN",
-              "B3"
-            ],
-            "outgoing_trace_context": [
-              "CLOUD_TRACE_CONTEXT",
-              "TRACE_CONTEXT",
-              "GRPC_TRACE_BIN",
-              "B3"
-            ]
-          }
-        }
-      },
-    }
diff --git a/tests/integration/telemetry/stackdriver/testdata/server_access_log.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/server_access_log.json.tmpl
deleted file mode 100644
index a62ecd62ab..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/server_access_log.json.tmpl
+++ /dev/null
@@ -1,35 +0,0 @@
-{
-    "http_request": {
-        "request_method": "POST",
-        "request_url": "http://srv.{{ .EchoNamespace }}.svc.cluster.local:7070/proto.EchoTestService/Echo",
-        "protocol": "grpc",
-        "status": "200"
-    },
-    "labels": {
-        "destination_app": "srv",
-        "destination_canonical_revision": "v1",
-        "destination_canonical_service": "srv",
-        "destination_namespace": "{{ .EchoNamespace }}",
-        "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "destination_service_host": "srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "destination_version": "v1",
-        "destination_workload": "srv-v1",
-        "mesh_uid": "test-mesh",
-        "response_flag": "-",
-        "service_authentication_policy": "MUTUAL_TLS",
-        "source_app": "clt",
-        "source_canonical_revision": "v1",
-        "source_canonical_service": "clt",
-        "source_namespace": "{{ .EchoNamespace }}",
-        "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "source_version": "v1",
-        "source_workload": "clt-v1",
-        "protocol": "grpc",
-        "log_sampled": "true",
-        "upstream_cluster": "inbound|7070|grpc|srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "route_name": "default",
-        "requested_server_name": "outbound_.7070_._.srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "x-envoy-original-dst-host": "",
-        "x-envoy-original-path": ""
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/server_request_count.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/server_request_count.json.tmpl
deleted file mode 100644
index 4fd120dbdc..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/server_request_count.json.tmpl
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/server/request_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "srv",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-          "destination_port": "7070",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "srv",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "srv-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "test-mesh",
-          "request_operation": "/proto.EchoTestService/Echo",
-          "request_protocol": "grpc",
-          "response_code": "200",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "clt",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "service_authentication_policy": "MUTUAL_TLS",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "clt-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    },
-    {{- if .OnGCE }}
-    "resource": {
-       "labels": {
-          "container_name": "app",
-          "namespace_name": "{{ .EchoNamespace }}"
-       },
-       "type": "k8s_container"
-    }
-    {{- end }}
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/server_tcp_connection_count.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/server_tcp_connection_count.json.tmpl
deleted file mode 100644
index 7b27b397ae..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/server_tcp_connection_count.json.tmpl
+++ /dev/null
@@ -1,36 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/server/connection_open_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "srv",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-          "destination_port": "9000",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "srv",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "srv-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "test-mesh",
-          "request_protocol": "tcp",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "clt",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "service_authentication_policy": "MUTUAL_TLS",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "clt-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    },
-    {{- if .OnGCE }}
-    "resource": {
-       "labels": {
-          "container_name": "app",
-          "namespace_name": "{{ .EchoNamespace }}"
-       },
-       "type": "k8s_container"
-    }
-    {{- end }}
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/tcp_server_access_log.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/tcp_server_access_log.json.tmpl
deleted file mode 100644
index c4491f2760..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/tcp_server_access_log.json.tmpl
+++ /dev/null
@@ -1,31 +0,0 @@
-{
-    "text_payload": "clt --> srv",
-    "labels": {
-        "destination_app": "srv",
-        "destination_canonical_revision": "v1",
-        "destination_canonical_service": "srv",
-        "destination_namespace": "{{ .EchoNamespace }}",
-        "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "destination_service_host": "srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "destination_version": "v1",
-        "destination_workload": "srv-v1",
-        "destination_port": "9000",
-        "mesh_uid": "test-mesh",
-        "response_flag": "-",
-        "service_authentication_policy": "MUTUAL_TLS",
-        "source_app": "clt",
-        "source_canonical_revision": "v1",
-        "source_canonical_service": "clt",
-        "source_namespace": "{{ .EchoNamespace }}",
-        "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "source_version": "v1",
-        "source_workload": "clt-v1",
-        "protocol": "tcp",
-        "log_sampled": "false",
-        "requested_server_name": "outbound_.9090_._.srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "upstream_cluster": "inbound|9090|tcp|srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "route_name": "",
-        "x-envoy-original-dst-host": "",
-        "x-envoy-original-path": ""
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/traffic_assertion.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/traffic_assertion.json.tmpl
deleted file mode 100644
index 8ce11bf8a0..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/traffic_assertion.json.tmpl
+++ /dev/null
@@ -1,19 +0,0 @@
-{
-    "source": {
-        "owner_uid": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-v1",
-        "workload_name": "clt-v1",
-        "workload_namespace": "{{ .EchoNamespace }}",
-        "canonical_service": "clt",
-        "canonical_revision": "v1"
-    },
-    "destination": {
-        "owner_uid": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-        "workload_name": "srv-v1",
-        "workload_namespace": "{{ .EchoNamespace }}",
-        "canonical_service": "srv",
-        "canonical_revision": "v1"
-    },
-    "protocol": "PROTOCOL_GRPC",
-    "destination_service_name": "srv",
-    "destination_service_namespace": "{{ .EchoNamespace }}"
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/main_test.go b/tests/integration/telemetry/stackdriver/vm/main_test.go
deleted file mode 100644
index a7d9718174..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/main_test.go
+++ /dev/null
@@ -1,130 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package vm
-
-import (
-	"io/ioutil"
-	"testing"
-
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/gcemetadata"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/components/stackdriver"
-	"istio.io/istio/pkg/test/util/tmpl"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/components/pilot"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-const (
-	stackdriverBootstrapOverride = "../testdata/custom_bootstrap.yaml.tmpl"
-	serverRequestCount           = "testdata/server_request_count.json.tmpl"
-	clientRequestCount           = "testdata/client_request_count.json.tmpl"
-	serverLogEntry               = "testdata/server_access_log.json.tmpl"
-	sdBootstrapConfigMap         = "stackdriver-bootstrap-config"
-)
-
-var (
-	i       istio.Instance
-	p       pilot.Instance
-	ns      namespace.Instance
-	gceInst gcemetadata.Instance
-	sdInst  stackdriver.Instance
-	srv     echo.Instance
-	clt     echo.Instance
-	vmEnv   map[string]string
-)
-
-// Testing telemetry with VM mesh expansion on a simulated GCE instance.
-// Rather than deal with the infra to get a real VM, we will use a pod
-// with no Service, no DNS, no service account, etc to simulate a VM.
-//
-// This test setup borrows heavily from the following packages:
-// - tests/integration/pilot/vm
-// - tests/integration/telemetry/stackdriver
-func TestMain(m *testing.M) {
-	framework.
-		NewSuite(m).
-		RequireSingleCluster().
-		Setup(istio.Setup(&i, func(cfg *istio.Config) {
-			cfg.ControlPlaneValues = `
-values:
-  global:
-    meshExpansion:
-      enabled: true`
-			cfg.Values["telemetry.enabled"] = "true"
-			cfg.Values["telemetry.v1.enabled"] = "false"
-			cfg.Values["telemetry.v2.enabled"] = "true"
-			cfg.Values["telemetry.v2.stackdriver.enabled"] = "true"
-			cfg.Values["telemetry.v2.stackdriver.logging"] = "true"
-		})).
-		Setup(func(ctx resource.Context) (err error) {
-			if p, err = pilot.New(ctx, pilot.Config{}); err != nil {
-				return err
-			}
-			return nil
-		}).
-		Setup(testSetup).
-		Run()
-}
-
-func testSetup(ctx resource.Context) (err error) {
-	ns, err = namespace.New(ctx, namespace.Config{
-		Prefix: "istio-echo",
-		Inject: true,
-	})
-	if err != nil {
-		return
-	}
-
-	gceInst, err = gcemetadata.New(ctx, gcemetadata.Config{})
-	if err != nil {
-		return
-	}
-
-	sdInst, err = stackdriver.New(ctx, stackdriver.Config{})
-	if err != nil {
-		return
-	}
-
-	templateBytes, err := ioutil.ReadFile(stackdriverBootstrapOverride)
-	if err != nil {
-		return
-	}
-	sdBootstrap, err := tmpl.Evaluate(string(templateBytes), map[string]interface{}{
-		"StackdriverNamespace": sdInst.GetStackdriverNamespace(),
-		"EchoNamespace":        ns.Name(),
-	})
-	if err != nil {
-		return
-	}
-
-	err = ctx.Config().ApplyYAML(ns.Name(), sdBootstrap)
-
-	vmLabelsJSON := "{\\\"service.istio.io/canonical-name\\\":\\\"vm-server\\\",\\\"service.istio.io/canonical-revision\\\":\\\"v1\\\"}"
-
-	vmEnv = map[string]string{
-		"ISTIO_META_INSECURE_STACKDRIVER_ENDPOINT":               sdInst.Address(),
-		"ISTIO_META_STACKDRIVER_MONITORING_EXPORT_INTERVAL_SECS": "10",
-		"ISTIO_META_MESH_ID":                                     "test-mesh",
-		"ISTIO_META_WORKLOAD_NAME":                               "vm-server-v1",
-		"ISTIO_METAJSON_LABELS":                                  vmLabelsJSON,
-		"GCE_METADATA_HOST":                                      gceInst.Address(),
-	}
-
-	return
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/testdata/client_request_count.json.tmpl b/tests/integration/telemetry/stackdriver/vm/testdata/client_request_count.json.tmpl
deleted file mode 100644
index 8469bfdf95..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/testdata/client_request_count.json.tmpl
+++ /dev/null
@@ -1,29 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/client/request_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "vm-server",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "//compute.googleapis.com/some-creator",
-          "destination_port": "8090",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "server",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "vm-server-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "test-mesh",
-          "request_operation": "GET",
-          "request_protocol": "http",
-          "response_code": "200",
-          "service_authentication_policy": "unknown",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "client",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/client-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "client-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/testdata/server_access_log.json.tmpl b/tests/integration/telemetry/stackdriver/vm/testdata/server_access_log.json.tmpl
deleted file mode 100644
index 47ecf6eeb7..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/testdata/server_access_log.json.tmpl
+++ /dev/null
@@ -1,33 +0,0 @@
-{
-    "http_request": {
-        "request_method": "GET",
-        "request_url": "http://server.{{ .EchoNamespace }}.svc.cluster.local:8090/",
-        "protocol": "http",
-        "status": "200"
-    },
-    "labels": {
-        "destination_canonical_revision": "v1",
-        "destination_canonical_service": "vm-server",
-        "destination_namespace": "{{ .EchoNamespace }}",
-        "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "destination_service_host": "server.{{ .EchoNamespace }}.svc.cluster.local",
-        "destination_workload": "vm-server-v1",
-        "mesh_uid": "test-mesh",
-        "response_flag": "-",
-        "service_authentication_policy": "MUTUAL_TLS",
-        "source_app": "client",
-        "source_canonical_revision": "v1",
-        "source_canonical_service": "client",
-        "source_namespace": "{{ .EchoNamespace }}",
-        "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "source_version": "v1",
-        "source_workload": "client-v1",
-        "protocol": "http",
-        "log_sampled": "false",
-        "upstream_cluster": "inbound|8090|http|server.{{ .EchoNamespace }}.svc.cluster.local",
-        "route_name": "default",
-        "requested_server_name": "outbound_.8090_._.server.{{ .EchoNamespace }}.svc.cluster.local",
-        "x-envoy-original-dst-host": "",
-        "x-envoy-original-path": ""
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/testdata/server_request_count.json.tmpl b/tests/integration/telemetry/stackdriver/vm/testdata/server_request_count.json.tmpl
deleted file mode 100644
index 8d8617a04e..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/testdata/server_request_count.json.tmpl
+++ /dev/null
@@ -1,29 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/server/request_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "vm-server",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "//compute.googleapis.com/some-creator",
-          "destination_port": "8090",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "server",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "vm-server-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "test-mesh",
-          "request_operation": "GET",
-          "request_protocol": "http",
-          "response_code": "200",
-          "service_authentication_policy": "MUTUAL_TLS",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "client",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/client-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "client-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/vm_test.go b/tests/integration/telemetry/stackdriver/vm/vm_test.go
deleted file mode 100644
index bf2c88c5cc..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/vm_test.go
+++ /dev/null
@@ -1,206 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package vm
-
-import (
-	"fmt"
-	"io/ioutil"
-	"testing"
-	"time"
-
-	"github.com/gogo/protobuf/jsonpb"
-	loggingpb "google.golang.org/genproto/googleapis/logging/v2"
-	monitoring "google.golang.org/genproto/googleapis/monitoring/v3"
-	"google.golang.org/protobuf/proto"
-
-	"istio.io/istio/pkg/config/protocol"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/echoboot"
-	"istio.io/istio/pkg/test/util/retry"
-	"istio.io/istio/pkg/test/util/tmpl"
-	"istio.io/istio/tests/integration/pilot/vm"
-)
-
-func TestVMTelemetry(t *testing.T) {
-	framework.
-		NewTest(t).
-		Features("observability.telemetry.stackdriver").
-		Run(func(ctx framework.TestContext) {
-			// Set up strict mTLS. This gives a bit more assurance the calls are actually going through envoy,
-			// and certs are set up correctly.
-			ctx.Config().ApplyYAMLOrFail(ctx, ns.Name(), `
-apiVersion: security.istio.io/v1beta1
-kind: PeerAuthentication
-metadata:
-  name: default
-spec:
-  mtls:
-    mode: STRICT
----
-apiVersion: networking.istio.io/v1alpha3
-kind: DestinationRule
-metadata:
-  name: send-mtls
-spec:
-  host: "*.svc.cluster.local"
-  trafficPolicy:
-    tls:
-      mode: ISTIO_MUTUAL
-`)
-			ports := []echo.Port{
-				{
-					Name:     "http",
-					Protocol: protocol.HTTP,
-					// Due to a bug in WorkloadEntry, service port must equal target port for now
-					InstancePort: 8090,
-					ServicePort:  8090,
-				},
-			}
-
-			// builder to build the instances iteratively
-			echoboot.NewBuilderOrFail(t, ctx).
-				With(&clt, echo.Config{
-					Service:   "client",
-					Namespace: ns,
-					Ports:     ports,
-					Subsets: []echo.SubsetConfig{
-						{
-							Annotations: map[echo.Annotation]*echo.AnnotationValue{
-								echo.SidecarBootstrapOverride: {
-									Value: sdBootstrapConfigMap,
-								},
-							},
-						},
-					},
-				}).
-				BuildOrFail(t)
-
-			echoboot.NewBuilderOrFail(t, ctx).
-				With(&srv, echo.Config{
-					Service:       "server",
-					Namespace:     ns,
-					Ports:         ports,
-					DeployAsVM:    true,
-					VMImage:       vm.DefaultVMImage,
-					VMEnvironment: vmEnv,
-				}).
-				BuildOrFail(t)
-
-			srvReceived := false
-			cltReceived := false
-			logReceived := false
-			retry.UntilSuccessOrFail(t, func() error {
-				_, err := clt.Call(echo.CallOptions{
-					Target:   srv,
-					PortName: "http",
-					Count:    1,
-				})
-				if err != nil {
-					return err
-				}
-				// Verify stackdriver metrics
-				wantClt, wantSrv, err := getWantRequestCountTS()
-				if err != nil {
-					return err
-				}
-				// Traverse all time series received and compare with expected client and server time series.
-				ts, err := sdInst.ListTimeSeries()
-				if err != nil {
-					return err
-				}
-				for _, tt := range ts {
-					// Making resource nil, as test can run on various platforms.
-					tt.Resource = nil
-					if proto.Equal(tt, &wantSrv) {
-						srvReceived = true
-					}
-					if proto.Equal(tt, &wantClt) {
-						cltReceived = true
-					}
-				}
-
-				// Verify log entry
-				wantLog, err := getWantServerLogEntry()
-				if err != nil {
-					return fmt.Errorf("failed to parse wanted log entry: %v", err)
-				}
-				// Traverse all log entries received and compare with expected server log entry.
-				entries, err := sdInst.ListLogEntries()
-				if err != nil {
-					return fmt.Errorf("failed to get received log entries: %v", err)
-				}
-				for _, l := range entries {
-					if proto.Equal(l, &wantLog) {
-						logReceived = true
-					}
-				}
-
-				// Check if both client and server side request count metrics are received
-				if !srvReceived || !cltReceived {
-					return fmt.Errorf("stackdriver server does not received expected server or client request count, server %v client %v", srvReceived, cltReceived)
-				}
-				if !logReceived {
-					return fmt.Errorf("stackdriver server does not received expected log entry")
-				}
-				return nil
-			}, retry.Delay(3*time.Second), retry.Timeout(40*time.Second))
-		})
-}
-
-func getWantRequestCountTS() (cltRequestCount, srvRequestCount monitoring.TimeSeries, err error) {
-	srvRequestCountTmpl, err := ioutil.ReadFile(serverRequestCount)
-	if err != nil {
-		return
-	}
-	sr, err := tmpl.Evaluate(string(srvRequestCountTmpl), map[string]interface{}{
-		"EchoNamespace": ns.Name(),
-	})
-	if err != nil {
-		return
-	}
-	if err = jsonpb.UnmarshalString(sr, &srvRequestCount); err != nil {
-		return
-	}
-	cltRequestCountTmpl, err := ioutil.ReadFile(clientRequestCount)
-	if err != nil {
-		return
-	}
-	cr, err := tmpl.Evaluate(string(cltRequestCountTmpl), map[string]interface{}{
-		"EchoNamespace": ns.Name(),
-	})
-	if err != nil {
-		return
-	}
-	err = jsonpb.UnmarshalString(cr, &cltRequestCount)
-	return
-}
-
-func getWantServerLogEntry() (srvLogEntry loggingpb.LogEntry, err error) {
-	srvlogEntryTmpl, err := ioutil.ReadFile(serverLogEntry)
-	if err != nil {
-		return
-	}
-	sr, err := tmpl.Evaluate(string(srvlogEntryTmpl), map[string]interface{}{
-		"EchoNamespace": ns.Name(),
-	})
-	if err != nil {
-		return
-	}
-	if err = jsonpb.UnmarshalString(sr, &srvLogEntry); err != nil {
-		return
-	}
-	return
-}

diff --git a/tests/integration/multicluster/base/main_test.go b/tests/integration/multicluster/base/main_test.go
deleted file mode 100644
index 60f9beecc3..0000000000
--- a/tests/integration/multicluster/base/main_test.go
+++ /dev/null
@@ -1,60 +0,0 @@
-// +build integ
-//  Copyright Istio Authors
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-
-package base
-
-import (
-	"testing"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-	"istio.io/istio/tests/integration/multicluster"
-)
-
-var (
-	ist    istio.Instance
-	appCtx multicluster.AppContext
-)
-
-func TestMain(m *testing.M) {
-	framework.
-		NewSuite(m).
-		Label(label.Multicluster).
-		RequireMinClusters(2).
-		Setup(multicluster.Setup(&appCtx)).
-		Setup(istio.Setup(&ist, func(_ resource.Context, cfg *istio.Config) {
-			cfg.ControlPlaneValues = appCtx.ControlPlaneValues
-		})).
-		Setup(multicluster.SetupApps(&appCtx)).
-		Run()
-}
-
-func TestMulticlusterReachability(t *testing.T) {
-	multicluster.ReachabilityTest(t, appCtx, "installation.multicluster.multimaster", "installation.multicluster.remote")
-}
-
-func TestCrossClusterLoadbalancing(t *testing.T) {
-	multicluster.LoadbalancingTest(t, appCtx, "installation.multicluster.multimaster", "installation.multicluster.remote")
-}
-
-func TestClusterLocalService(t *testing.T) {
-	multicluster.ClusterLocalTest(t, appCtx, "installation.multicluster.multimaster", "installation.multicluster.remote")
-}
-
-func TestTelemetry(t *testing.T) {
-	multicluster.TelemetryTest(t, appCtx, "installation.multicluster.multimaster", "installation.multicluster.remote")
-}
diff --git a/tests/integration/multicluster/centralistio/main_test.go b/tests/integration/multicluster/centralistio/main_test.go
deleted file mode 100644
index 241056dc9a..0000000000
--- a/tests/integration/multicluster/centralistio/main_test.go
+++ /dev/null
@@ -1,89 +0,0 @@
-// +build integ
-//  Copyright Istio Authors
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-
-package centralistio
-
-import (
-	"istio.io/istio/pkg/test/framework/components/cluster"
-	kubecluster "istio.io/istio/pkg/test/framework/components/cluster/kube"
-	"testing"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-	"istio.io/istio/tests/integration/multicluster"
-)
-
-var (
-	ist    istio.Instance
-	appCtx multicluster.AppContext
-)
-
-func TestMain(m *testing.M) {
-	framework.
-		NewSuite(m).
-		Label(label.Multicluster, label.Flaky).
-		RequireMinClusters(2).
-		Setup(multicluster.Setup(&appCtx)).
-		Setup(func(ctx resource.Context) error {
-			// TODO, this should be exclusively configurable outside of the framework
-			configCluster := ctx.Clusters()[0]
-			externalControlPlaneCluster := ctx.Clusters()[1]
-			for _, c := range ctx.Clusters() {
-				c.(*kubecluster.Cluster).OverrideTopology(func(c cluster.Topology) cluster.Topology {
-					return c.
-						WithConfig(configCluster.Name()).
-						WithPrimary(externalControlPlaneCluster.Name())
-				})
-			}
-			return nil
-		}).
-		Setup(istio.Setup(&ist, func(_ resource.Context, cfg *istio.Config) {
-
-			cfg.Values["global.externalIstiod"] = "true"
-
-			// Set the control plane values on the config.
-			// For ingress, add port 15017 to the default list of ports.
-			cfg.ControlPlaneValues = appCtx.ControlPlaneValues + `
-  global:
-    externalIstiod: true`
-			cfg.RemoteClusterValues = `
-components:
-  base:
-    enabled: true
-  pilot:
-    enabled: false  
-  istiodRemote:
-    enabled: true
-values:
-  global:
-    externalIstiod: true`
-		})).
-		Setup(multicluster.SetupApps(&appCtx)).
-		Run()
-}
-
-func TestMulticlusterReachability(t *testing.T) {
-	multicluster.ReachabilityTest(t, appCtx, "installation.multicluster.central-istiod")
-}
-
-func TestCrossClusterLoadbalancing(t *testing.T) {
-	multicluster.LoadbalancingTest(t, appCtx, "installation.multicluster.central-istiod")
-}
-
-func TestClusterLocalService(t *testing.T) {
-	multicluster.ClusterLocalTest(t, appCtx, "installation.multicluster.central-istiod")
-}
diff --git a/tests/integration/multicluster/centralremotekubeconfig/main_test.go b/tests/integration/multicluster/centralremotekubeconfig/main_test.go
deleted file mode 100644
index ac0777d56f..0000000000
--- a/tests/integration/multicluster/centralremotekubeconfig/main_test.go
+++ /dev/null
@@ -1,100 +0,0 @@
-// +build integ
-//  Copyright Istio Authors
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-
-package centralremotekubeconfig
-
-import (
-	"testing"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/cluster"
-	kubecluster "istio.io/istio/pkg/test/framework/components/cluster/kube"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-	"istio.io/istio/tests/integration/multicluster"
-)
-
-var (
-	ist istio.Instance
-)
-
-func TestMain(m *testing.M) {
-	framework.
-		NewSuite(m).
-		Label(label.Multicluster).
-		RequireMinClusters(2).
-		Setup(func(ctx resource.Context) error {
-			// TODO, this should be exclusively configurable outside of the framework
-			configCluster := ctx.Clusters()[0]
-			externalControlPlaneCluster := ctx.Clusters()[1]
-			for _, c := range ctx.Clusters() {
-				c.(*kubecluster.Cluster).OverrideTopology(func(c cluster.Topology) cluster.Topology {
-					return c.
-						WithConfig(configCluster.Name()).
-						WithPrimary(externalControlPlaneCluster.Name())
-				})
-			}
-			return nil
-		}).
-		Setup(istio.Setup(&ist, func(_ resource.Context, cfg *istio.Config) {
-			// Set the control plane values on the config.
-			cfg.ConfigClusterValues =
-				`components:
-  base:
-    enabled: true
-  pilot:
-    enabled: false
-  telemetry:
-    enabled: false
-  istiodRemote:
-    enabled: true
-  ingressGateways:
-  - enabled: false
-    name: istio-ingressgateway
-  egressGateways:
-  - enabled: false
-    name: istio-egressgateway
-values:
-  istiodRemote:
-    injectionURL: https://istiod.istio-system.svc:15017/inject
-  base:
-    validationURL: https://istiod.istio-system.svc:15017/validate`
-			cfg.ControlPlaneValues = `
-components:
-  base:
-    enabled: false
-  pilot:
-    enabled: true
-    k8s:
-      service:
-        type: LoadBalancer
-  ingressGateways:
-  - enabled: false
-    name: istio-ingressgateway
-  egressGateways:
-  - enabled: false
-    name: istio-egressgateway
-values:
-  global:
-    operatorManageWebhooks: true
-`
-		})).
-		Run()
-}
-
-func TestIngressGateway(t *testing.T) {
-	multicluster.GatewayTest(t, "installation.multicluster.centralremotekubeconfig")
-}
diff --git a/tests/integration/multicluster/cluster_local.go b/tests/integration/multicluster/cluster_local.go
deleted file mode 100644
index 654c2a4bb7..0000000000
--- a/tests/integration/multicluster/cluster_local.go
+++ /dev/null
@@ -1,45 +0,0 @@
-// +build integ
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"testing"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/features"
-	"istio.io/istio/pkg/test/framework/label"
-)
-
-// ClusterLocalTest tests that traffic works within a local cluster while in a multicluster configuration
-// ClusterLocalNS have been configured in meshConfig.serviceSettings to be clusterLocal.
-func ClusterLocalTest(t *testing.T, apps AppContext, features ...features.Feature) {
-	framework.NewTest(t).
-		Features(features...).
-		Run(func(ctx framework.TestContext) {
-			ctx.NewSubTest("respect-cluster-local-config").Run(func(ctx framework.TestContext) {
-				for _, c := range ctx.Clusters() {
-					c := c
-					ctx.NewSubTest(c.Name()).
-						Label(label.Multicluster).
-						Run(func(ctx framework.TestContext) {
-							local := apps.LocalEchos.GetOrFail(ctx, echo.InCluster(c))
-							callOrFail(ctx, local, local, echo.ExpectCluster(c.Name()))
-						})
-				}
-			})
-		})
-}
diff --git a/tests/integration/multicluster/gateway.go b/tests/integration/multicluster/gateway.go
deleted file mode 100644
index 1e44f49352..0000000000
--- a/tests/integration/multicluster/gateway.go
+++ /dev/null
@@ -1,82 +0,0 @@
-// +build integ
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"context"
-	"fmt"
-	"path/filepath"
-	"testing"
-	"time"
-
-	v1 "k8s.io/api/core/v1"
-	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
-
-	"istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/components/istioctl"
-	"istio.io/istio/pkg/test/framework/features"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/scopes"
-	"istio.io/istio/pkg/test/util/retry"
-)
-
-// GatewayTest tests that istio ingress gateway can be started successfully in remote cluster
-func GatewayTest(t *testing.T, feature features.Feature) {
-	framework.NewTest(t).
-		Label(label.Multicluster).
-		Features(feature).
-		Run(func(ctx framework.TestContext) {
-			ctx.NewSubTest("gateway").
-				Run(func(ctx framework.TestContext) {
-
-					cfg, err := istio.DefaultConfig(ctx)
-					if err != nil {
-						t.Fatalf("error ")
-					}
-					clusters := ctx.Environment().Clusters()
-					args := []string{"install", "-f", filepath.Join(env.IstioSrc,
-						"tests/integration/multicluster/testdata/gateway.yaml"), "--manifests",
-						filepath.Join(env.IstioSrc, "manifests"), "--skip-confirmation"}
-					for _, cluster := range clusters {
-						_, err = cluster.AdmissionregistrationV1().ValidatingWebhookConfigurations().Get(context.TODO(),
-							"istiod-istio-system", metav1.GetOptions{})
-						if err == nil {
-							istioCtl := istioctl.NewOrFail(ctx, ctx, istioctl.Config{Cluster: cluster})
-							scopes.Framework.Debugf("cluster Name %s", cluster.Name())
-							istioCtl.Invoke(args)
-							retry.UntilSuccessOrFail(t, func() error {
-								pods, err := cluster.CoreV1().Pods(cfg.SystemNamespace).List(context.TODO(), metav1.ListOptions{})
-								if err != nil {
-									return err
-								}
-								if len(pods.Items) == 0 {
-									return fmt.Errorf("still waiting the ingress gateway pod to start")
-								}
-								if pods.Items[0].Status.Phase != v1.PodRunning {
-									return fmt.Errorf("still waiting the ingress gateway pod to start")
-								}
-								return nil
-							}, retry.Delay(3*time.Second), retry.Timeout(80*time.Second))
-							break
-						}
-
-					}
-
-				})
-		})
-}
diff --git a/tests/integration/multicluster/helper.go b/tests/integration/multicluster/helper.go
deleted file mode 100644
index f83424dbc4..0000000000
--- a/tests/integration/multicluster/helper.go
+++ /dev/null
@@ -1,155 +0,0 @@
-// +build integ
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"fmt"
-
-	"istio.io/istio/pkg/config/protocol"
-	"istio.io/istio/pkg/test/echo/common/scheme"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/echoboot"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-type AppContext struct {
-	apps
-	Namespace      namespace.Instance
-	LocalNamespace namespace.Instance
-	// ControlPlaneValues to set during istio deploy
-	ControlPlaneValues string
-}
-
-type apps struct {
-	// UniqueEchos are have different names in each cluster.
-	UniqueEchos echo.Instances
-	// LBEchos are the same in each cluster
-	LBEchos echo.Instances
-	// LocalEchos can only be reached from the same cluster
-	LocalEchos echo.Instances
-}
-
-// Setup initialize app context with control plane values and namespaces
-func Setup(appCtx *AppContext) resource.SetupFn {
-	return func(ctx resource.Context) error {
-		*appCtx = AppContext{}
-		var err error
-		appCtx.Namespace, err = namespace.New(ctx, namespace.Config{Prefix: "mc-reachability", Inject: true})
-		if err != nil {
-			return err
-		}
-		appCtx.LocalNamespace, err = namespace.New(ctx, namespace.Config{Prefix: "cluster-local", Inject: true})
-		if err != nil {
-			return err
-		}
-		appCtx.ControlPlaneValues = fmt.Sprintf(`
-values:
-  meshConfig:
-    serviceSettings: 
-      - settings:
-          clusterLocal: true
-        hosts:
-          - "*.%s.svc.cluster.local"
-`, appCtx.LocalNamespace.Name())
-		return nil
-	}
-}
-
-// SetupApps depoys echos
-func SetupApps(appCtx *AppContext) resource.SetupFn {
-	return func(ctx resource.Context) error {
-		if appCtx.Namespace == nil || appCtx.LocalNamespace == nil {
-			return fmt.Errorf("namespaces not initialized; run Setup first")
-		}
-		// set up echos
-		// Running multiple instances in each cluster teases out cases where proxies inconsistently
-		// use wrong different discovery server. For higher numbers of clusters, we already end up
-		// running plenty of services. (see https://github.com/istio/istio/issues/23591).
-		uniqSvcPerCluster := 5 - len(ctx.Clusters())
-		if uniqSvcPerCluster < 1 {
-			uniqSvcPerCluster = 1
-		}
-
-		builder := echoboot.NewBuilder(ctx)
-		for _, cluster := range ctx.Clusters() {
-			echoLbCfg := newEchoConfig("echolb", appCtx.Namespace, cluster)
-			echoLbCfg.Subsets = append(echoLbCfg.Subsets, echo.SubsetConfig{Version: "v2"})
-
-			builder = builder.
-				WithConfig(echoLbCfg).
-				WithConfig(newEchoConfig("local", appCtx.LocalNamespace, cluster))
-			for i := 0; i < uniqSvcPerCluster; i++ {
-				svcName := fmt.Sprintf("echo-%s-%d", cluster.Name(), i)
-				builder = builder.WithConfig(newEchoConfig(svcName, appCtx.Namespace, cluster))
-			}
-		}
-		echos, err := builder.Build()
-		if err != nil {
-			return err
-		}
-
-		appCtx.apps = apps{
-			UniqueEchos: echos.Match(echo.ServicePrefix("echo-")),
-			LBEchos:     echos.Match(echo.Service("echolb")),
-			// it's faster to spin up cluster-local echos than to wait for creating/deleting cluster-local config to propagate
-			LocalEchos: echos.Match(echo.Service("local")),
-		}
-		return nil
-	}
-}
-
-func newEchoConfig(service string, ns namespace.Instance, cluster resource.Cluster) echo.Config {
-	return echo.Config{
-		Service:        service,
-		Namespace:      ns,
-		Cluster:        cluster,
-		ServiceAccount: true,
-		Subsets: []echo.SubsetConfig{
-			{
-				Version: "v1",
-			},
-		},
-		Ports: []echo.Port{
-			{
-				Name:     "http",
-				Protocol: protocol.HTTP,
-				// We use a port > 1024 to not require root
-				InstancePort: 8090,
-			},
-			{
-				Name:     "tcp",
-				Protocol: protocol.TCP,
-			},
-			{
-				Name:     "grpc",
-				Protocol: protocol.GRPC,
-			},
-		},
-	}
-}
-
-func callOrFail(ctx framework.TestContext, src, dest echo.Instance, validator echo.Validator) {
-	ctx.Helper()
-	_ = src.CallWithRetryOrFail(ctx, echo.CallOptions{
-		Target:    dest,
-		PortName:  "http",
-		Scheme:    scheme.HTTP,
-		Count:     20 * len(ctx.Clusters()),
-		Validator: echo.And(echo.ExpectOK(), validator),
-	})
-}
diff --git a/tests/integration/multicluster/loadbalancing.go b/tests/integration/multicluster/loadbalancing.go
deleted file mode 100644
index 175d07d05a..0000000000
--- a/tests/integration/multicluster/loadbalancing.go
+++ /dev/null
@@ -1,82 +0,0 @@
-// +build integ
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"fmt"
-	"testing"
-
-	"istio.io/istio/pkg/test/echo/client"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/features"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-func LoadbalancingTest(t *testing.T, apps AppContext, features ...features.Feature) {
-	framework.NewTest(t).
-		Label(label.Multicluster).
-		Features(features...).
-		Run(func(ctx framework.TestContext) {
-			ctx.NewSubTest("loadbalancing").
-				Run(func(ctx framework.TestContext) {
-					for _, src := range apps.LBEchos {
-						src := src
-						ctx.NewSubTest(fmt.Sprintf("from %s", src.Config().Cluster.Name())).
-							Run(func(ctx framework.TestContext) {
-								srcNetwork := src.Config().Cluster.NetworkName()
-								callOrFail(ctx, src, apps.LBEchos[0],
-									echo.And(
-										checkReachedAllSubsets(apps.LBEchos),
-										checkEqualIntraNetworkTraffic(ctx.Clusters(), srcNetwork)))
-							})
-					}
-				})
-		})
-}
-
-func checkReachedAllSubsets(echos echo.Instances) echo.Validator {
-	return echo.ValidatorFunc(func(res client.ParsedResponses, _ error) error {
-		// make sure we reached all cluster/subset combos
-		for _, e := range echos {
-			for _, ss := range e.Config().Subsets {
-				version, cluster := ss.Version, e.Config().Cluster.Name()
-				responses := res.Match(func(r *client.ParsedResponse) bool {
-					return r.Cluster == cluster && r.Version == version
-				})
-				if len(responses) < 1 {
-					return fmt.Errorf("did not reach %s in %s", version, cluster)
-				}
-			}
-		}
-		return nil
-	})
-}
-
-func checkEqualIntraNetworkTraffic(clusters resource.Clusters, srcNetwork string) echo.Validator {
-	// expect same network traffic to have very equal distribution (20% error)
-	intraNetworkClusters := clusters.ByNetwork()[srcNetwork]
-	return echo.ValidatorFunc(func(res client.ParsedResponses, _ error) error {
-		intraNetworkRes := res.Match(func(r *client.ParsedResponse) bool {
-			return srcNetwork == clusters.GetByName(r.Cluster).NetworkName()
-		})
-		if err := intraNetworkRes.CheckEqualClusterTraffic(intraNetworkClusters, 20); err != nil {
-			return fmt.Errorf("same network traffic was not even: %v", err)
-		}
-		return nil
-	})
-}
diff --git a/tests/integration/multicluster/reachability.go b/tests/integration/multicluster/reachability.go
deleted file mode 100644
index b9a6cbc2d2..0000000000
--- a/tests/integration/multicluster/reachability.go
+++ /dev/null
@@ -1,55 +0,0 @@
-// +build integ
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"fmt"
-	"testing"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/features"
-	"istio.io/istio/pkg/test/framework/label"
-)
-
-// ReachabilityTest tests that different services in 2 different clusters can talk to each other.
-func ReachabilityTest(t *testing.T, apps AppContext, features ...features.Feature) {
-	framework.NewTest(t).
-		Label(label.Multicluster).
-		Features(features...).
-		Run(func(ctx framework.TestContext) {
-			ctx.NewSubTest("reachability").
-				Run(func(ctx framework.TestContext) {
-					clusters := ctx.Clusters()
-					for _, src := range apps.UniqueEchos {
-						for _, dstCluster := range clusters {
-							src := src
-							dest := apps.UniqueEchos.GetOrFail(ctx, echo.InCluster(dstCluster))
-							subTestName := fmt.Sprintf("%s->%s://%s:%s%s",
-								src.Config().Service,
-								"http",
-								dest.Config().Service,
-								"http",
-								"/")
-							ctx.NewSubTest(subTestName).
-								RunParallel(func(ctx framework.TestContext) {
-									callOrFail(ctx, src, dest, nil)
-								})
-						}
-					}
-				})
-		})
-}
diff --git a/tests/integration/multicluster/telemetry.go b/tests/integration/multicluster/telemetry.go
deleted file mode 100644
index 0cbbe280a6..0000000000
--- a/tests/integration/multicluster/telemetry.go
+++ /dev/null
@@ -1,92 +0,0 @@
-// +build integ
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"fmt"
-	"testing"
-
-	"istio.io/istio/pkg/test"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/features"
-	"istio.io/istio/pkg/test/framework/label"
-)
-
-// TelemetryTest validates that source and destination labels are collected
-// for multicluster traffic.
-func TelemetryTest(t *testing.T, apps AppContext, features ...features.Feature) {
-	framework.NewTest(t).
-		Label(label.Multicluster).
-		Features(features...).
-		Run(func(ctx framework.TestContext) {
-			ctx.NewSubTest("telemetry").
-				Run(func(ctx framework.TestContext) {
-					for _, src := range ctx.Clusters() {
-						for _, dest := range ctx.Clusters() {
-							src, dest := src, dest
-							subTestName := fmt.Sprintf("%s->%s://%s:%s%s",
-								src.Name(),
-								"http",
-								dest.Name(),
-								"http",
-								"/")
-
-							ctx.NewSubTest(subTestName).
-								RunParallel(func(ctx framework.TestContext) {
-									src := apps.UniqueEchos.GetOrFail(ctx, echo.InCluster(src))
-									dest := apps.UniqueEchos.GetOrFail(ctx, echo.InCluster(dest))
-
-									callOrFail(ctx, src, dest, nil)
-									validateClusterLabelsInStats(src, ctx)
-									validateClusterLabelsInStats(dest, ctx)
-								})
-						}
-					}
-				})
-		})
-}
-
-func validateClusterLabelsInStats(svc echo.Instance, t test.Failer) {
-	t.Helper()
-	workloads := svc.WorkloadsOrFail(t)
-	stats := workloads[0].Sidecar().StatsOrFail(t)
-
-	for _, metricName := range []string{"istio_requests_total", "istio_request_duration_milliseconds"} {
-		instances, found := stats[metricName]
-		if !found {
-			t.Fatalf("%s not found in stats: %v", metricName, stats)
-		}
-
-		for _, metric := range instances.Metric {
-			hasSourceCluster := false
-			hasDestinationCluster := false
-			for _, l := range metric.Label {
-				if l.GetName() == "source_cluster" {
-					hasSourceCluster = true
-					continue
-				}
-				if l.GetName() == "destination_cluster" {
-					hasDestinationCluster = true
-					continue
-				}
-			}
-			if !hasSourceCluster && !hasDestinationCluster {
-				t.Fatalf("cluster labels missing for %q. labels: %v", metricName, metric.Label)
-			}
-		}
-	}
-}
diff --git a/tests/integration/multicluster/testdata/gateway.yaml b/tests/integration/multicluster/testdata/gateway.yaml
deleted file mode 100644
index 6c27330094..0000000000
--- a/tests/integration/multicluster/testdata/gateway.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-apiVersion: install.istio.io/v1alpha1
-kind: IstioOperator
-spec:
-  profile: empty
-  components:
-    ingressGateways:
-      - name: test-gateway
-        enabled: true
\ No newline at end of file

diff --git a/tests/integration/multicluster/centralistio/main_test.go b/tests/integration/multicluster/centralistio/main_test.go
deleted file mode 100644
index 5365f595a0..0000000000
--- a/tests/integration/multicluster/centralistio/main_test.go
+++ /dev/null
@@ -1,107 +0,0 @@
-//  Copyright Istio Authors
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-
-package centralistio
-
-import (
-	"testing"
-
-	"istio.io/istio/tests/integration/multicluster"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/environment/kube"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/components/pilot"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-var (
-	ist                              istio.Instance
-	pilots                           []pilot.Instance
-	clusterLocalNS, mcReachabilityNS namespace.Instance
-	controlPlaneValues               string
-)
-
-func TestMain(m *testing.M) {
-	framework.
-		NewSuite(m).
-		Label(label.Multicluster).
-		RequireMinClusters(2).
-		Setup(multicluster.Setup(&controlPlaneValues, &clusterLocalNS, &mcReachabilityNS)).
-		Setup(kube.Setup(func(s *kube.Settings) {
-			// Make CentralIstiod run on first cluster, all others are remotes which use centralIstiod's pilot
-			s.ControlPlaneTopology = make(map[resource.ClusterIndex]resource.ClusterIndex)
-			primaryCluster := resource.ClusterIndex(0)
-			for i := 0; i < len(s.KubeConfig); i++ {
-				s.ControlPlaneTopology[resource.ClusterIndex(i)] = primaryCluster
-			}
-		})).
-		Setup(istio.Setup(&ist, func(cfg *istio.Config) {
-
-			cfg.Values["global.centralIstiod"] = "true"
-
-			// Set the control plane values on the config.
-			cfg.ControlPlaneValues = controlPlaneValues + `
-  gateways:
-    istio-ingressgateway:
-      meshExpansionPorts:
-      - port: 15017
-        targetPort: 15017
-        name: tcp-webhook
-      - port: 15012
-        targetPort: 15012
-        name: tcp-istiod
-  global:
-    centralIstiod: true`
-			cfg.RemoteClusterValues = `
-components:
-  base:
-    enabled: true
-  pilot:
-    enabled: false  
-  istiodRemote:
-    enabled: true 
-  ingressGateways:
-  - name: istio-ingressgateway
-    enabled: true
-values:
-  global:
-    centralIstiod: true`
-		})).
-		Setup(func(ctx resource.Context) (err error) {
-			pilots = make([]pilot.Instance, len(ctx.Environment().Clusters()))
-			// All clusters talk to the same pilot
-			pilot, err := pilot.New(ctx, pilot.Config{
-				Cluster: ctx.Environment().Clusters()[0],
-			})
-			if err != nil {
-				return err
-			}
-			for i := 0; i < len(ctx.Environment().Clusters()); i++ {
-				pilots[i] = pilot
-			}
-			return nil
-		}).
-		Run()
-}
-
-func TestMulticlusterReachability(t *testing.T) {
-	multicluster.ReachabilityTest(t, mcReachabilityNS, "installation.multicluster.central-istiod")
-}
-
-func TestClusterLocalService(t *testing.T) {
-	multicluster.ClusterLocalTest(t, clusterLocalNS, "installation.multicluster.central-istiod")
-}
diff --git a/tests/integration/multicluster/centralistio/testdata/iop-remote-base.yaml b/tests/integration/multicluster/centralistio/testdata/iop-remote-base.yaml
deleted file mode 100644
index 77183d0eb2..0000000000
--- a/tests/integration/multicluster/centralistio/testdata/iop-remote-base.yaml
+++ /dev/null
@@ -1,14 +0,0 @@
-# This file provides some defaults for integration testing.
-apiVersion: install.istio.io/v1alpha1
-kind: IstioOperator
-spec:
-  components:
-    base:
-      enabled: true
-    pilot:
-      enabled: false  
-    istiodRemote:
-      enabled: false 
-    ingressGateways:
-    - name: istio-ingressgateway
-      enabled: false
\ No newline at end of file
diff --git a/tests/integration/multicluster/cluster_local.go b/tests/integration/multicluster/cluster_local.go
deleted file mode 100644
index dc0a2bf212..0000000000
--- a/tests/integration/multicluster/cluster_local.go
+++ /dev/null
@@ -1,67 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"fmt"
-	"testing"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/echoboot"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/features"
-	"istio.io/istio/pkg/test/framework/label"
-)
-
-// ClusterLocalTest tests that traffic works within a local cluster while in a multicluster configuration
-// clusterLocalNS have been configured in meshConfig.serviceSettings to be clusterLocal.
-func ClusterLocalTest(t *testing.T, clusterLocalNS namespace.Instance, feature features.Feature) {
-	framework.NewTest(t).
-		Features(feature).
-		Run(func(ctx framework.TestContext) {
-			ctx.NewSubTest("respect-cluster-local-config").Run(func(ctx framework.TestContext) {
-				clusters := ctx.Environment().Clusters()
-				for i := range clusters {
-					i := i
-					ctx.NewSubTest(fmt.Sprintf("cluster-%d cluster local", i)).
-						Label(label.Multicluster).
-						RunParallel(func(ctx framework.TestContext) {
-							local := clusters[i]
-
-							// Deploy src only in local, but dst in all clusters. dst in remote clusters shouldn't be hit
-							srcName, dstName := fmt.Sprintf("src-%d", i), fmt.Sprintf("dst-%d", i)
-							var src, dst echo.Instance
-							builder := echoboot.NewBuilderOrFail(ctx, ctx).
-								With(&src, newEchoConfig(srcName, clusterLocalNS, local)).
-								With(&dst, newEchoConfig(dstName, clusterLocalNS, local))
-							for j, remoteCluster := range clusters {
-								if i == j {
-									continue
-								}
-								var ref echo.Instance
-								builder = builder.With(&ref, newEchoConfig(dstName, clusterLocalNS, remoteCluster))
-							}
-							builder.BuildOrFail(ctx)
-
-							results := callOrFail(ctx, src, dst)
-
-							// Ensure that all requests went to the local cluster.
-							results.CheckClusterOrFail(ctx, local.Name())
-						})
-				}
-			})
-		})
-}
diff --git a/tests/integration/multicluster/helper.go b/tests/integration/multicluster/helper.go
deleted file mode 100644
index 9ca6ff74b3..0000000000
--- a/tests/integration/multicluster/helper.go
+++ /dev/null
@@ -1,112 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"fmt"
-	"time"
-
-	"istio.io/istio/pkg/config/protocol"
-	"istio.io/istio/pkg/test"
-	"istio.io/istio/pkg/test/echo/client"
-	"istio.io/istio/pkg/test/echo/common/scheme"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/resource"
-	"istio.io/istio/pkg/test/util/retry"
-)
-
-var (
-	retryTimeout = time.Second * 30
-	retryDelay   = time.Millisecond * 100
-)
-
-func Setup(controlPlaneValues *string, clusterLocalNS, mcReachabilityNS *namespace.Instance) func(ctx resource.Context) error {
-	return func(ctx resource.Context) (err error) {
-		// Create a cluster-local namespace.
-		if *clusterLocalNS, err = namespace.New(ctx, namespace.Config{Prefix: "local", Inject: true}); err != nil {
-			return err
-		}
-		// Create a cluster-local namespace.
-		if *mcReachabilityNS, err = namespace.New(ctx, namespace.Config{Prefix: "mc-reachability", Inject: true}); err != nil {
-			return err
-		}
-
-		// Set the cluster-local namespaces in the mesh config.
-		*controlPlaneValues = fmt.Sprintf(`
-values:
-  meshConfig:
-    serviceSettings: 
-      - settings:
-          clusterLocal: true
-        hosts:
-          - "*.%s.svc.cluster.local"
-`, (*clusterLocalNS).Name())
-
-		return
-	}
-}
-
-func newEchoConfig(service string, ns namespace.Instance, cluster resource.Cluster) echo.Config {
-	return echo.Config{
-		Service:        service,
-		Namespace:      ns,
-		Cluster:        cluster,
-		ServiceAccount: true,
-		Subsets: []echo.SubsetConfig{
-			{
-				Version: "v1",
-			},
-		},
-		Ports: []echo.Port{
-			{
-				Name:     "http",
-				Protocol: protocol.HTTP,
-				// We use a port > 1024 to not require root
-				InstancePort: 8090,
-			},
-			{
-				Name:     "tcp",
-				Protocol: protocol.TCP,
-			},
-			{
-				Name:     "grpc",
-				Protocol: protocol.GRPC,
-			},
-		},
-	}
-}
-
-func callOrFail(ctx test.Failer, src, dest echo.Instance) client.ParsedResponses {
-	ctx.Helper()
-	var results client.ParsedResponses
-	retry.UntilSuccessOrFail(ctx, func() (err error) {
-		results, err = src.Call(echo.CallOptions{
-			Target:   dest,
-			PortName: "http",
-			Scheme:   scheme.HTTP,
-			Count:    5,
-		})
-		if err == nil {
-			err = results.CheckOK()
-		}
-		if err != nil {
-			return fmt.Errorf("%s to %s:%s using %s: expected success but failed: %v",
-				src.Config().Service, dest.Config().Service, "http", scheme.HTTP, err)
-		}
-		return nil
-	}, retry.Timeout(retryTimeout), retry.Delay(retryDelay))
-	return results
-}
diff --git a/tests/integration/multicluster/multimaster/main_test.go b/tests/integration/multicluster/multimaster/main_test.go
deleted file mode 100644
index e87c5cefc0..0000000000
--- a/tests/integration/multicluster/multimaster/main_test.go
+++ /dev/null
@@ -1,67 +0,0 @@
-//  Copyright Istio Authors
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-
-package multimaster
-
-import (
-	"testing"
-
-	"istio.io/istio/tests/integration/multicluster"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/environment/kube"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-var (
-	ist                              istio.Instance
-	clusterLocalNS, mcReachabilityNS namespace.Instance
-	controlPlaneValues               string
-)
-
-func TestMain(m *testing.M) {
-	framework.
-		NewSuite(m).
-		Label(label.Multicluster).
-		RequireMinClusters(2).
-		Setup(multicluster.Setup(&controlPlaneValues, &clusterLocalNS, &mcReachabilityNS)).
-		Setup(kube.Setup(func(s *kube.Settings) {
-			// Make all clusters independent
-			s.ControlPlaneTopology = make(map[resource.ClusterIndex]resource.ClusterIndex)
-			for i := 0; i < len(s.KubeConfig); i++ {
-				idx := resource.ClusterIndex(i)
-				s.ControlPlaneTopology[idx] = idx
-			}
-		})).
-		Setup(istio.Setup(&ist, func(cfg *istio.Config) {
-			// Set the control plane values on the config.
-			cfg.ControlPlaneValues = controlPlaneValues
-		})).
-		Run()
-}
-
-func TestMulticlusterReachability(t *testing.T) {
-	multicluster.ReachabilityTest(t, mcReachabilityNS, "installation.multicluster.multimaster")
-}
-
-func TestClusterLocalService(t *testing.T) {
-	multicluster.ClusterLocalTest(t, clusterLocalNS, "installation.multicluster.multimaster")
-}
-
-func TestTelemetry(t *testing.T) {
-	multicluster.TelemetryTest(t, mcReachabilityNS, "installation.multicluster.multimaster")
-}
diff --git a/tests/integration/multicluster/reachability.go b/tests/integration/multicluster/reachability.go
deleted file mode 100644
index 946b61a527..0000000000
--- a/tests/integration/multicluster/reachability.go
+++ /dev/null
@@ -1,83 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"fmt"
-	"testing"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/echoboot"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/features"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-const mcReachabilitySvcPerCluster = 3
-
-// ReachabilityTest tests that services in 2 different clusters can talk to each other.
-func ReachabilityTest(t *testing.T, ns namespace.Instance, feature features.Feature) {
-	framework.NewTest(t).
-		Label(label.Multicluster).
-		Features(feature).
-		Run(func(ctx framework.TestContext) {
-			ctx.NewSubTest("reachability").
-				Run(func(ctx framework.TestContext) {
-					// Deploy services in different clusters.
-					// There are multiple instances in each cluster to tease out cases where proxies inconsistently
-					// use different discovery server. Spinning up more services and therefore more proxies increases
-					// the odds of a proxy getting bad configuration and not being able to reach a service in another cluster.
-					// (see https://github.com/istio/istio/issues/23591).
-					clusters := ctx.Environment().Clusters()
-					services := map[resource.ClusterIndex][]*echo.Instance{}
-					builder := echoboot.NewBuilderOrFail(ctx, ctx)
-					for _, cluster := range clusters {
-						for i := 0; i < mcReachabilitySvcPerCluster; i++ {
-							var instance echo.Instance
-							ref := &instance
-							svcName := fmt.Sprintf("echo-%d-%d", cluster.Index(), i)
-							builder = builder.With(ref, newEchoConfig(svcName, ns, cluster))
-							services[cluster.Index()] = append(services[cluster.Index()], ref)
-						}
-					}
-					builder.BuildOrFail(ctx)
-
-					// Now verify that all services in each cluster can hit one service in each cluster.
-					// Calling 1 service per remote cluster makes the number linear rather than quadratic with
-					// respect to len(clusters) * svcPerCluster.
-					for _, srcServices := range services {
-						for _, src := range srcServices {
-							for _, dstServices := range services {
-								src := *src
-								dest := *dstServices[0]
-								subTestName := fmt.Sprintf("%s->%s://%s:%s%s",
-									src.Config().Service,
-									"http",
-									dest.Config().Service,
-									"http",
-									"/")
-
-								ctx.NewSubTest(subTestName).
-									RunParallel(func(ctx framework.TestContext) {
-										_ = callOrFail(ctx, src, dest)
-									})
-							}
-						}
-					}
-				})
-		})
-}
diff --git a/tests/integration/multicluster/remote/main_test.go b/tests/integration/multicluster/remote/main_test.go
deleted file mode 100644
index 2e34aedcdf..0000000000
--- a/tests/integration/multicluster/remote/main_test.go
+++ /dev/null
@@ -1,68 +0,0 @@
-//  Copyright Istio Authors
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-
-package remote
-
-import (
-	"testing"
-
-	"istio.io/istio/pkg/test/framework/components/environment/kube"
-
-	"istio.io/istio/tests/integration/multicluster"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-var (
-	ist                              istio.Instance
-	clusterLocalNS, mcReachabilityNS namespace.Instance
-	controlPlaneValues               string
-)
-
-func TestMain(m *testing.M) {
-	framework.
-		NewSuite(m).
-		Label(label.Multicluster).
-		RequireMinClusters(2).
-		Setup(multicluster.Setup(&controlPlaneValues, &clusterLocalNS, &mcReachabilityNS)).
-		Setup(kube.Setup(func(s *kube.Settings) {
-			// Make all clusters use the same control plane
-			s.ControlPlaneTopology = make(map[resource.ClusterIndex]resource.ClusterIndex)
-			primaryCluster := resource.ClusterIndex(0)
-			for i := 0; i < len(s.KubeConfig); i++ {
-				s.ControlPlaneTopology[resource.ClusterIndex(i)] = primaryCluster
-			}
-		})).
-		Setup(istio.Setup(&ist, func(cfg *istio.Config) {
-			// Set the control plane values on the config.
-			cfg.ControlPlaneValues = controlPlaneValues
-		})).
-		Run()
-}
-
-func TestMulticlusterReachability(t *testing.T) {
-	multicluster.ReachabilityTest(t, mcReachabilityNS, "installation.multicluster.remote")
-}
-
-func TestClusterLocalService(t *testing.T) {
-	multicluster.ClusterLocalTest(t, clusterLocalNS, "installation.multicluster.remote")
-}
-
-func TestTelemetry(t *testing.T) {
-	multicluster.TelemetryTest(t, mcReachabilityNS, "installation.multicluster.remote")
-}
diff --git a/tests/integration/multicluster/telemetry.go b/tests/integration/multicluster/telemetry.go
deleted file mode 100644
index 65841eaab2..0000000000
--- a/tests/integration/multicluster/telemetry.go
+++ /dev/null
@@ -1,106 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package multicluster
-
-import (
-	"fmt"
-	"testing"
-
-	"istio.io/istio/pkg/test"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/echoboot"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/features"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-// TelemetryTest validates that source and destination labels are collected
-// for multicluster traffic.
-func TelemetryTest(t *testing.T, ns namespace.Instance, feature features.Feature) {
-	framework.NewTest(t).
-		Label(label.Multicluster).
-		Features(feature).
-		Run(func(ctx framework.TestContext) {
-			ctx.NewSubTest("telemetry").
-				Run(func(ctx framework.TestContext) {
-					clusters := ctx.Environment().Clusters()
-					services := map[resource.ClusterIndex][]*echo.Instance{}
-					builder := echoboot.NewBuilderOrFail(ctx, ctx)
-					for _, cluster := range clusters {
-						var instance echo.Instance
-						ref := &instance
-						svcName := fmt.Sprintf("echo-%d", cluster.Index())
-						builder = builder.With(ref, newEchoConfig(svcName, ns, cluster))
-						services[cluster.Index()] = append(services[cluster.Index()], ref)
-					}
-					builder.BuildOrFail(ctx)
-
-					for _, srcServices := range services {
-						for _, src := range srcServices {
-							for _, dstServices := range services {
-								src := *src
-								dest := *dstServices[0]
-								subTestName := fmt.Sprintf("%s->%s://%s:%s%s",
-									src.Config().Service,
-									"http",
-									dest.Config().Service,
-									"http",
-									"/")
-
-								ctx.NewSubTest(subTestName).
-									RunParallel(func(ctx framework.TestContext) {
-										_ = callOrFail(ctx, src, dest)
-										validateClusterLabelsInStats(src, t)
-										validateClusterLabelsInStats(dest, t)
-									})
-							}
-						}
-					}
-				})
-		})
-}
-
-func validateClusterLabelsInStats(svc echo.Instance, t test.Failer) {
-	t.Helper()
-	workloads := svc.WorkloadsOrFail(t)
-	stats := workloads[0].Sidecar().StatsOrFail(t)
-
-	for _, metricName := range []string{"istio_requests_total", "istio_request_duration_milliseconds"} {
-		instances, found := stats[metricName]
-		if !found {
-			t.Fatalf("%s not found in stats: %v", metricName, stats)
-		}
-
-		for _, metric := range instances.Metric {
-			hasSourceCluster := false
-			hasDestinationCluster := false
-			for _, label := range metric.Label {
-				if label.GetName() == "source_cluster" {
-					hasSourceCluster = true
-					continue
-				}
-				if label.GetName() == "destination_cluster" {
-					hasDestinationCluster = true
-					continue
-				}
-			}
-			if !hasSourceCluster && !hasDestinationCluster {
-				t.Fatalf("cluster labels missing for %q. labels: %v", metricName, metric.Label)
-			}
-		}
-	}
-}

diff --git a/tests/integration/telemetry/stackdriver/stackdriver_filter_audit_test.go b/tests/integration/telemetry/stackdriver/stackdriver_filter_audit_test.go
deleted file mode 100644
index 227f5cbe02..0000000000
--- a/tests/integration/telemetry/stackdriver/stackdriver_filter_audit_test.go
+++ /dev/null
@@ -1,166 +0,0 @@
-// +build integ
-// Copyright Istio Authors. All Rights Reserved.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package stackdriver
-
-import (
-	"context"
-	"fmt"
-	"net/http"
-	"strings"
-	"testing"
-	"time"
-
-	"golang.org/x/sync/errgroup"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/stackdriver"
-	"istio.io/istio/pkg/test/scopes"
-	"istio.io/istio/pkg/test/util/file"
-	"istio.io/istio/pkg/test/util/retry"
-	"istio.io/istio/pkg/test/util/tmpl"
-	"istio.io/istio/tests/integration/telemetry"
-)
-
-const (
-	serverAuditAllLogEntry = "testdata/security_authz_audit/server_audit_all_log.json.tmpl"
-	serverAuditFooLogEntry = "testdata/security_authz_audit/server_audit_foo_log.json.tmpl"
-	serverAuditBarLogEntry = "testdata/security_authz_audit/server_audit_bar_log.json.tmpl"
-	auditPolicyForLogEntry = "testdata/security_authz_audit/v1beta1-audit-authorization-policy.yaml.tmpl"
-)
-
-// TestStackdriverAuditLogging testing Authz Policy can config stackdriver with audit policy
-func TestStackdriverHTTPAuditLogging(t *testing.T) {
-	framework.NewTest(t).
-		Features("observability.telemetry.stackdriver").
-		Run(func(ctx framework.TestContext) {
-			g, _ := errgroup.WithContext(context.Background())
-
-			ns := getEchoNamespaceInstance().Name()
-			args := map[string]string{
-				"Namespace": ns,
-			}
-			policies := tmpl.EvaluateAllOrFail(t, args, file.AsStringOrFail(t, auditPolicyForLogEntry))
-			ctx.Config().ApplyYAMLOrFail(t, ns, policies...)
-			defer ctx.Config().DeleteYAMLOrFail(t, ns, policies...)
-			t.Logf("Audit policy deployed to namespace %v", ns)
-
-			for _, cltInstance := range clt {
-				scopes.Framework.Infof("Validating Audit policy and Telemetry for Cluster %v", cltInstance.Config().Cluster.Name())
-				g.Go(func() error {
-					err := retry.UntilSuccess(func() error {
-						if err := sendTrafficForAudit(t, cltInstance); err != nil {
-							return err
-						}
-						t.Logf("Traffic sent to namespace %v", ns)
-
-						clName := cltInstance.Config().Cluster.Name()
-						t.Logf("Collect Audit Log for cluster %v", clName)
-
-						var errs []string
-
-						errAuditFoo := validateLogs(t, serverAuditFooLogEntry, clName, stackdriver.ServerAuditLog)
-						if errAuditFoo == nil {
-							t.Logf("Foo Audit Log validated for cluster %v", clName)
-						} else {
-							errs = append(errs, errAuditFoo.Error())
-						}
-
-						errAuditBar := validateLogs(t, serverAuditBarLogEntry, clName, stackdriver.ServerAuditLog)
-						if errAuditBar == nil {
-							t.Logf("Bar Audit Log validated for cluster %v", clName)
-						} else {
-							errs = append(errs, errAuditBar.Error())
-						}
-
-						errAuditAll := validateLogs(t, serverAuditAllLogEntry, clName, stackdriver.ServerAuditLog)
-						if errAuditAll == nil {
-							t.Logf("All Audit Log validated for cluster %v", clName)
-						} else {
-							errs = append(errs, errAuditAll.Error())
-						}
-
-						entries, err := sdInst.ListLogEntries(stackdriver.ServerAuditLog)
-						if err != nil {
-							errs = append(errs, err.Error())
-						} else {
-							for _, l := range entries {
-								if l.HttpRequest != nil && strings.HasSuffix(l.HttpRequest.RequestUrl, "audit-none") {
-									errs = append(errs, "unwanted audit log entry `/audit-none` received.")
-								}
-							}
-						}
-
-						if len(errs) == 0 {
-							return nil
-						}
-
-						return fmt.Errorf(strings.Join(errs, "\n"))
-					}, retry.Delay(5*time.Second), retry.Timeout(80*time.Second))
-
-					if err != nil {
-						return err
-					}
-					return nil
-				})
-			}
-			if err := g.Wait(); err != nil {
-				t.Fatalf("test failed: %v", err)
-			}
-		})
-}
-
-// send http requests with different header and path
-func sendTrafficForAudit(t *testing.T, cltInstance echo.Instance) error {
-	t.Helper()
-
-	newOptions := func(headers http.Header, path string) echo.CallOptions {
-		return echo.CallOptions{
-			Target:   srv[0],
-			PortName: "http",
-			Headers:  headers,
-			Path:     path,
-			Count:    telemetry.RequestCountMultipler,
-		}
-	}
-
-	opts := []echo.CallOptions{
-		// request will be logged if "request header" value and "to operation path" is matched with audit policy
-		// path "/audit-none" will be filtered by audit policy and will not be logged
-		newOptions(nil, "/audit-none"),
-		newOptions(map[string][]string{"X-Audit": {"foo"}}, "/audit-none"),
-		newOptions(map[string][]string{"x-Audit": {"bar"}}, "/audit-none"),
-
-		// Headers are case sensitive for this test framework. It requires capitalize the first letter of every word
-		newOptions(map[string][]string{"X-Header": {"bar"}}, "/foo"),
-		newOptions(map[string][]string{"X-Header": {"foo"}}, "/bar"),
-		newOptions(map[string][]string{"X-Header": {"bar"}}, "/bar"),
-		newOptions(map[string][]string{"X-Header": {"foo"}}, "/foo"),
-
-		// path "/audit-all" is matched in audit policy and all requests will be logged
-		newOptions(nil, "/audit-all"),
-		newOptions(map[string][]string{"X-Audit": {"foo"}}, "/audit-all"),
-		newOptions(map[string][]string{"X-Audit": {"bar"}}, "/audit-all"),
-	}
-
-	for _, opt := range opts {
-		if _, err := cltInstance.Call(opt); err != nil {
-			t.Logf("with call option %v got err %v", opt, err)
-			return err
-		}
-	}
-	return nil
-}
diff --git a/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go b/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go
deleted file mode 100644
index 4bf84f0820..0000000000
--- a/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go
+++ /dev/null
@@ -1,423 +0,0 @@
-// +build integ
-// Copyright Istio Authors. All Rights Reserved.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package stackdriver
-
-import (
-	"context"
-	"errors"
-	"fmt"
-	"io/ioutil"
-	"net/http"
-	"strings"
-	"testing"
-
-	"cloud.google.com/go/compute/metadata"
-	"github.com/golang/protobuf/jsonpb"
-	"github.com/golang/protobuf/proto"
-	"golang.org/x/sync/errgroup"
-	loggingpb "google.golang.org/genproto/googleapis/logging/v2"
-	monitoring "google.golang.org/genproto/googleapis/monitoring/v3"
-
-	"istio.io/istio/pkg/config/protocol"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/echoboot"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/components/stackdriver"
-	edgespb "istio.io/istio/pkg/test/framework/components/stackdriver/edges"
-	telemetrypkg "istio.io/istio/pkg/test/framework/components/telemetry"
-	"istio.io/istio/pkg/test/framework/label"
-	"istio.io/istio/pkg/test/framework/resource"
-	"istio.io/istio/pkg/test/scopes"
-	"istio.io/istio/pkg/test/util/retry"
-	"istio.io/istio/pkg/test/util/tmpl"
-	"istio.io/istio/tests/integration/telemetry"
-)
-
-const (
-	stackdriverBootstrapOverride = "testdata/custom_bootstrap.yaml.tmpl"
-	serverRequestCount           = "testdata/server_request_count.json.tmpl"
-	clientRequestCount           = "testdata/client_request_count.json.tmpl"
-	serverLogEntry               = "testdata/server_access_log.json.tmpl"
-	trafficAssertionTmpl         = "testdata/traffic_assertion.json.tmpl"
-	sdBootstrapConfigMap         = "stackdriver-bootstrap-config"
-
-	projectsPrefix = "projects/test-project"
-)
-
-var (
-	ist        istio.Instance
-	echoNsInst namespace.Instance
-	sdInst     stackdriver.Instance
-	srv        echo.Instances
-	clt        echo.Instances
-)
-
-func getIstioInstance() *istio.Instance {
-	return &ist
-}
-
-func getEchoNamespaceInstance() namespace.Instance {
-	return echoNsInst
-}
-
-func unmarshalFromTemplateFile(file string, out proto.Message, clName string) error {
-	templateFile, err := ioutil.ReadFile(file)
-	if err != nil {
-		return err
-	}
-	resource, err := tmpl.Evaluate(string(templateFile), map[string]interface{}{
-		"EchoNamespace": getEchoNamespaceInstance().Name(),
-		"ClusterName":   clName,
-		"OnGCE":         metadata.OnGCE(),
-	})
-	if err != nil {
-		return err
-	}
-	return jsonpb.UnmarshalString(resource, out)
-}
-
-// TestStackdriverMonitoring verifies that stackdriver WASM filter exports metrics with expected labels.
-func TestStackdriverMonitoring(t *testing.T) {
-	framework.NewTest(t).
-		Features("observability.telemetry.stackdriver").
-		Run(func(ctx framework.TestContext) {
-			g, _ := errgroup.WithContext(context.Background())
-			for _, cltInstance := range clt {
-				g.Go(func() error {
-					err := retry.UntilSuccess(func() error {
-						if err := sendTraffic(t, cltInstance); err != nil {
-							return err
-						}
-						clName := cltInstance.Config().Cluster.Name()
-						scopes.Framework.Infof("Validating for cluster %s", clName)
-
-						//Validate cluster names in telemetry below once https://github.com/istio/istio/issues/28125 is fixed.
-						if err := validateMetrics(t, serverRequestCount, clientRequestCount, clName); err != nil {
-							return err
-						}
-						t.Logf("Metrics validated")
-						if err := validateLogs(t, serverLogEntry, clName, stackdriver.ServerAccessLog); err != nil {
-							return err
-						}
-						t.Logf("logs validated")
-						if err := validateTraces(t); err != nil {
-							return err
-						}
-						t.Logf("Traces validated")
-						if err := validateEdges(t, clName); err != nil {
-							return err
-						}
-						t.Logf("Edges validated")
-
-						return nil
-
-					}, retry.Delay(telemetrypkg.RetryDelay), retry.Timeout(telemetrypkg.RetryTimeout))
-
-					if err != nil {
-						return err
-					}
-					return nil
-				})
-			}
-			if err := g.Wait(); err != nil {
-				t.Fatalf("test failed: %v", err)
-			}
-		})
-}
-
-func TestMain(m *testing.M) {
-	framework.NewSuite(m).
-		Label(label.CustomSetup).
-		Setup(istio.Setup(getIstioInstance(), setupConfig)).
-		Setup(testSetup).
-		Run()
-}
-
-func setupConfig(_ resource.Context, cfg *istio.Config) {
-	if cfg == nil {
-		return
-	}
-	cfg.ControlPlaneValues = `
-meshConfig:
-  enableTracing: true
-values:
-  telemetry:
-    v2:
-      stackdriver:
-        configOverride:
-          meshEdgesReportingDuration: "5s"
-          enable_mesh_edges_reporting: true
-`
-	// enable stackdriver filter
-	cfg.Values["telemetry.v2.stackdriver.enabled"] = "true"
-	cfg.Values["telemetry.v2.stackdriver.logging"] = "true"
-	cfg.Values["telemetry.v2.stackdriver.topology"] = "true"
-	cfg.Values["telemetry.v2.stackdriver.configOverride.enable_audit_log"] = "true"
-	cfg.Values["global.proxy.tracer"] = "stackdriver"
-	cfg.Values["pilot.traceSampling"] = "100"
-	cfg.Values["telemetry.v2.accessLogPolicy.enabled"] = "true"
-}
-
-func testSetup(ctx resource.Context) (err error) {
-	echoNsInst, err = namespace.New(ctx, namespace.Config{
-		Prefix: "istio-echo",
-		Inject: true,
-	})
-	if err != nil {
-		return
-	}
-
-	sdInst, err = stackdriver.New(ctx, stackdriver.Config{})
-	if err != nil {
-		return
-	}
-	templateBytes, err := ioutil.ReadFile(stackdriverBootstrapOverride)
-	if err != nil {
-		return
-	}
-	sdBootstrap, err := tmpl.Evaluate(string(templateBytes), map[string]interface{}{
-		"StackdriverAddress": sdInst.Address(),
-		"EchoNamespace":      getEchoNamespaceInstance().Name(),
-	})
-	if err != nil {
-		return
-	}
-
-	err = ctx.Config().ApplyYAML(echoNsInst.Name(), sdBootstrap)
-	if err != nil {
-		return
-	}
-
-	builder := echoboot.NewBuilder(ctx)
-	for _, cls := range ctx.Clusters() {
-		clName := cls.Name()
-		builder.
-			WithConfig(echo.Config{
-				Service:   fmt.Sprintf("clt-%s", clName),
-				Cluster:   cls,
-				Namespace: getEchoNamespaceInstance(),
-				Subsets: []echo.SubsetConfig{
-					{
-						Annotations: map[echo.Annotation]*echo.AnnotationValue{
-							echo.SidecarBootstrapOverride: {
-								Value: sdBootstrapConfigMap,
-							},
-						},
-					},
-				}}).
-			WithConfig(echo.Config{
-				Service:   "srv",
-				Cluster:   cls,
-				Namespace: getEchoNamespaceInstance(),
-				Ports: []echo.Port{
-					{
-						Name:     "grpc",
-						Protocol: protocol.GRPC,
-						// We use a port > 1024 to not require root
-						InstancePort: 7070,
-					},
-					{
-						Name:     "http",
-						Protocol: protocol.HTTP,
-						// We use a port > 1024 to not require root
-						InstancePort: 8888,
-					},
-					{
-						Name:     "tcp",
-						Protocol: protocol.TCP,
-						// We use a port > 1024 to not require root
-						InstancePort: 9000,
-					},
-				},
-				Subsets: []echo.SubsetConfig{
-					{
-						Annotations: map[echo.Annotation]*echo.AnnotationValue{
-							echo.SidecarBootstrapOverride: {
-								Value: sdBootstrapConfigMap,
-							},
-						},
-					},
-				}})
-	}
-	echos, err := builder.Build()
-	if err != nil {
-		return
-	}
-	clt = echos.Match(echo.ServicePrefix("clt"))
-	srv = echos.Match(echo.Service("srv"))
-	return nil
-}
-
-// send both a grpc and http requests (http with forced tracing).
-func sendTraffic(t *testing.T, cltInstance echo.Instance) error {
-	t.Helper()
-	//  All server instance have same names, so setting target as srv[0].
-	// Sending the number of total request same as number of servers, so that load balancing gets a chance to send request to all the clusters.
-	grpcOpts := echo.CallOptions{
-		Target:   srv[0],
-		PortName: "grpc",
-		Count:    telemetry.RequestCountMultipler * len(srv),
-	}
-	// an HTTP request with forced tracing
-	hdr := http.Header{}
-	httpOpts := echo.CallOptions{
-		Target:   srv[0],
-		PortName: "http",
-		Headers:  hdr,
-		Count:    telemetry.RequestCountMultipler * len(srv),
-	}
-	if _, err := cltInstance.Call(grpcOpts); err != nil {
-		return err
-	}
-	if _, err := cltInstance.Call(httpOpts); err != nil {
-		return err
-	}
-	return nil
-}
-
-func validateMetrics(t *testing.T, serverReqCount, clientReqCount, clName string) error {
-	t.Helper()
-
-	var wantClient, wantServer monitoring.TimeSeries
-	if err := unmarshalFromTemplateFile(serverReqCount, &wantServer, clName); err != nil {
-		return fmt.Errorf("metrics: error generating wanted server request: %v", err)
-	}
-	if err := unmarshalFromTemplateFile(clientReqCount, &wantClient, clName); err != nil {
-		return fmt.Errorf("metrics: error generating wanted client request: %v", err)
-	}
-
-	// Traverse all time series received and compare with expected client and server time series.
-	ts, err := sdInst.ListTimeSeries()
-	if err != nil {
-		return fmt.Errorf("metrics: error getting time-series from Stackdriver: %v", err)
-	}
-
-	t.Logf("number of timeseries: %v", len(ts))
-	var gotServer, gotClient bool
-	for _, tt := range ts {
-		if tt.Metric.Type != wantClient.Metric.Type && tt.Metric.Type != wantServer.Metric.Type {
-			continue
-		}
-		if proto.Equal(tt, &wantServer) {
-			gotServer = true
-		}
-		if proto.Equal(tt, &wantClient) {
-			gotClient = true
-		}
-	}
-	if !(gotServer && gotClient) {
-		return fmt.Errorf("metrics: did not get expected metrics for cluster %s; server = %t, client = %t", clName, gotServer, gotClient)
-	}
-	return nil
-}
-
-func validateLogs(t *testing.T, srvLogEntry, clName string, filter stackdriver.LogType) error {
-	t.Helper()
-	var wantLog loggingpb.LogEntry
-	if err := unmarshalFromTemplateFile(srvLogEntry, &wantLog, clName); err != nil {
-		return fmt.Errorf("logs: failed to parse wanted log entry: %v", err)
-	}
-
-	// Traverse all log entries received and compare with expected server log entry.
-	entries, err := sdInst.ListLogEntries(filter)
-	if err != nil {
-		return fmt.Errorf("logs: failed to get received log entries: %v", err)
-	}
-
-	for _, l := range entries {
-		if proto.Equal(l, &wantLog) {
-			return nil
-		}
-	}
-
-	return errors.New("logs: did not get expected log entry")
-}
-
-func validateEdges(t *testing.T, clName string) error {
-	t.Helper()
-
-	var wantEdge edgespb.TrafficAssertion
-	if err := unmarshalFromTemplateFile(trafficAssertionTmpl, &wantEdge, clName); err != nil {
-		return fmt.Errorf("edges: failed to build wanted traffic assertion: %v", err)
-	}
-	edges, err := sdInst.ListTrafficAssertions()
-	if err != nil {
-		return fmt.Errorf("edges: failed to get traffic assertions from Stackdriver: %v", err)
-	}
-	for _, edge := range edges {
-		edge.Destination.Uid = ""
-		edge.Destination.ClusterName = ""
-		edge.Destination.Location = ""
-		edge.Source.Uid = ""
-		edge.Source.ClusterName = ""
-		edge.Source.Location = ""
-		edge.Protocol = 0
-		t.Logf("edge: %v", edge)
-		if proto.Equal(edge, &wantEdge) {
-			return nil
-		}
-	}
-	return errors.New("edges: did not get expected traffic assertion")
-}
-
-func validateTraces(t *testing.T) error {
-	t.Helper()
-
-	// we are looking for a trace that looks something like:
-	//
-	// project_id:"projects/test-project"
-	// trace_id:"99bc9a02417c12c4877e19a4172ae11a"
-	// spans:{
-	//   span_id:440543054939690778
-	//   name:"projects/test-project/traces/99bc9a02417c12c4877e19a4172ae11a/spans/061d1f9309f2171a"
-	//   start_time:{seconds:1594418699  nanos:648039133}
-	//   end_time:{seconds:1594418699  nanos:669864006}
-	//   parent_span_id:18050098903530484457
-	//   labels:{
-	//     key:"span"
-	//     value:"srv.istio-echo-1-92573.svc.cluster.local:80/*"
-	//   }
-	// }
-	//
-	// we only need to validate the span value in the labels and project_id for
-	// the purposes of this test at the moment.
-	//
-	// future improvements include adding canonical service info, etc. in the
-	// span.
-
-	wantSpanLabel := fmt.Sprintf("srv.%s.svc.cluster.local:80/*", getEchoNamespaceInstance().Name())
-	traces, err := sdInst.ListTraces()
-	if err != nil {
-		return fmt.Errorf("traces: could not retrieve traces from Stackdriver: %v", err)
-	}
-	for _, trace := range traces {
-		t.Logf("trace: %v\n", trace)
-		if trace.ProjectId != projectsPrefix {
-			continue
-		}
-		for _, span := range trace.Spans {
-			if !strings.HasPrefix(span.Name, projectsPrefix) {
-				continue
-			}
-			if got, ok := span.Labels["span"]; ok && got == wantSpanLabel {
-				return nil
-			}
-		}
-	}
-	return errors.New("traces: could not find expected trace")
-}
diff --git a/tests/integration/telemetry/stackdriver/stackdriver_tcp_filter_test.go b/tests/integration/telemetry/stackdriver/stackdriver_tcp_filter_test.go
deleted file mode 100644
index baada7c054..0000000000
--- a/tests/integration/telemetry/stackdriver/stackdriver_tcp_filter_test.go
+++ /dev/null
@@ -1,76 +0,0 @@
-// +build integ
-// Copyright Istio Authors. All Rights Reserved.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package stackdriver
-
-import (
-	"context"
-	"testing"
-
-	"golang.org/x/sync/errgroup"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/stackdriver"
-	telemetrypkg "istio.io/istio/pkg/test/framework/components/telemetry"
-	"istio.io/istio/pkg/test/util/retry"
-	"istio.io/istio/tests/integration/telemetry"
-)
-
-const (
-	tcpServerConnectionCount = "testdata/server_tcp_connection_count.json.tmpl"
-	tcpClientConnectionCount = "testdata/client_tcp_connection_count.json.tmpl"
-	tcpServerLogEntry        = "testdata/tcp_server_access_log.json.tmpl"
-)
-
-// TestTCPStackdriverMonitoring verifies that stackdriver TCP filter works.
-func TestTCPStackdriverMonitoring(t *testing.T) {
-	framework.NewTest(t).
-		Features("observability.telemetry.stackdriver").
-		Run(func(ctx framework.TestContext) {
-			g, _ := errgroup.WithContext(context.Background())
-			for _, cltInstance := range clt {
-				g.Go(func() error {
-					err := retry.UntilSuccess(func() error {
-						_, err := cltInstance.Call(echo.CallOptions{
-							Target:   srv[0],
-							PortName: "tcp",
-							Count:    telemetry.RequestCountMultipler * len(srv),
-						})
-						if err != nil {
-							return err
-						}
-						t.Logf("Validating Telemetry for Cluster %v", cltInstance.Config().Cluster)
-						clName := cltInstance.Config().Cluster.Name()
-						if err := validateMetrics(t, tcpServerConnectionCount, tcpClientConnectionCount, clName); err != nil {
-							return err
-						}
-						if err := validateLogs(t, tcpServerLogEntry, clName, stackdriver.ServerAccessLog); err != nil {
-							return err
-						}
-
-						return nil
-					}, retry.Delay(telemetrypkg.RetryDelay), retry.Timeout(telemetrypkg.RetryTimeout))
-					if err != nil {
-						return err
-					}
-					return nil
-				})
-			}
-			if err := g.Wait(); err != nil {
-				t.Fatalf("test failed: %v", err)
-			}
-		})
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/client_request_count.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/client_request_count.json.tmpl
deleted file mode 100644
index 715c435ac6..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/client_request_count.json.tmpl
+++ /dev/null
@@ -1,37 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/client/request_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "srv",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-          "destination_port": "7070",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "srv",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "srv-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "proj-test-mesh",
-          "request_operation": "/proto.EchoTestService/Echo",
-          "request_protocol": "grpc",
-          "response_code": "200",
-          "service_authentication_policy": "unknown",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "clt-{{ .ClusterName }}",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-{{ .ClusterName }}-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "clt-{{ .ClusterName }}-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    },
-    {{- if .OnGCE  }}
-    "resource": {
-       "labels": {
-          "namespace_name": "{{ .EchoNamespace }}"
-       },
-       "type": "k8s_pod"
-    }
-    {{- end }}
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/client_tcp_connection_count.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/client_tcp_connection_count.json.tmpl
deleted file mode 100644
index 40704bb8e0..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/client_tcp_connection_count.json.tmpl
+++ /dev/null
@@ -1,35 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/client/connection_open_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "srv",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-          "destination_port": "9000",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "srv",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "srv-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "proj-test-mesh",
-          "request_protocol": "tcp",
-          "service_authentication_policy": "unknown",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "clt-{{ .ClusterName }}",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-{{ .ClusterName }}-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "clt-{{ .ClusterName }}-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    },
-    {{- if .OnGCE  }}
-    "resource": {
-       "labels": {
-          "namespace_name": "{{ .EchoNamespace }}"
-       },
-       "type": "k8s_pod"
-    }
-    {{- end }}
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/custom_bootstrap.yaml.tmpl b/tests/integration/telemetry/stackdriver/testdata/custom_bootstrap.yaml.tmpl
deleted file mode 100644
index 84a4991112..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/custom_bootstrap.yaml.tmpl
+++ /dev/null
@@ -1,53 +0,0 @@
-apiVersion: v1
-kind: ConfigMap
-metadata:
-  name: stackdriver-bootstrap-config
-  namespace: {{ .EchoNamespace }}
-data:
-  custom_bootstrap.json: |
-    {
-      "node": {
-        "metadata": {
-          "INSECURE_STACKDRIVER_ENDPOINT": "{{ .StackdriverAddress }}",
-          "STACKDRIVER_MONITORING_EXPORT_INTERVAL_SECS": "10",
-          "MESH_ID": "proj-test-mesh",
-        }
-      },
-      "tracing": {
-        "http": {
-          "name": "envoy.tracers.opencensus",
-          "typed_config": {
-            "@type": "type.googleapis.com/envoy.config.trace.v3.OpenCensusConfig",
-            "trace_config": {
-              "constant_sampler": {
-                "decision": "ALWAYS_PARENT"
-              },
-              "max_number_of_attributes": "200",
-              "max_number_of_annotations": "200",
-              "max_number_of_message_events": "200",
-              "max_number_of_links": "200"
-            },
-            "stackdriver_exporter_enabled": true,
-            "stackdriver_grpc_service": {
-              "google_grpc": {
-                "target_uri": "{{ .StackdriverAddress }}",
-                "stat_prefix": "oc_stackdriver_tracer",
-              }
-            },
-            "stackdriver_project_id": "test-project",
-            "incoming_trace_context": [
-              "CLOUD_TRACE_CONTEXT",
-              "TRACE_CONTEXT",
-              "GRPC_TRACE_BIN",
-              "B3"
-            ],
-            "outgoing_trace_context": [
-              "CLOUD_TRACE_CONTEXT",
-              "TRACE_CONTEXT",
-              "GRPC_TRACE_BIN",
-              "B3"
-            ]
-          }
-        }
-      },
-    }
diff --git a/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_all_log.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_all_log.json.tmpl
deleted file mode 100644
index 3260b3eb59..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_all_log.json.tmpl
+++ /dev/null
@@ -1,25 +0,0 @@
-{
-    "httpRequest": {
-      "requestMethod": "GET",
-      "requestUrl": "http://srv.{{ .EchoNamespace }}.svc.cluster.local/audit-all",
-      "status": 200,
-      "protocol": "http"
-    },
-    "labels": {
-      "source_app": "clt-{{ .ClusterName }}",
-      "destination_canonical_service": "srv",
-      "destination_workload": "srv-v1",
-      "destination_service_host": "srv.{{ .EchoNamespace }}.svc.cluster.local",
-      "destination_app": "srv",
-      "source_canonical_service": "clt-{{ .ClusterName }}",
-      "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-      "destination_namespace": "{{ .EchoNamespace }}",
-      "destination_canonical_revision": "v1",
-      "source_workload": "clt-{{ .ClusterName }}-v1",
-      "source_namespace": "{{ .EchoNamespace }}",
-      "destination_service_name": "srv",
-      "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-      "source_canonical_revision": "v1"
-    },
-    "trace_sampled":true
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_bar_log.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_bar_log.json.tmpl
deleted file mode 100644
index f958cb9715..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_bar_log.json.tmpl
+++ /dev/null
@@ -1,25 +0,0 @@
-{
-    "httpRequest": {
-      "requestMethod": "GET",
-      "requestUrl": "http://srv.{{ .EchoNamespace }}.svc.cluster.local/bar",
-      "status": 200,
-      "protocol": "http"
-    },
-    "labels": {
-      "source_app": "clt-{{ .ClusterName }}",
-      "destination_canonical_service": "srv",
-      "destination_workload": "srv-v1",
-      "destination_service_host": "srv.{{ .EchoNamespace }}.svc.cluster.local",
-      "destination_app": "srv",
-      "source_canonical_service": "clt-{{ .ClusterName }}",
-      "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-      "destination_namespace": "{{ .EchoNamespace }}",
-      "destination_canonical_revision": "v1",
-      "source_workload": "clt-{{ .ClusterName }}-v1",
-      "source_namespace": "{{ .EchoNamespace }}",
-      "destination_service_name": "srv",
-      "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-      "source_canonical_revision": "v1"
-    },
-    "trace_sampled":true
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_foo_log.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_foo_log.json.tmpl
deleted file mode 100644
index 741d445c0c..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/server_audit_foo_log.json.tmpl
+++ /dev/null
@@ -1,25 +0,0 @@
-{
-    "httpRequest": {
-      "requestMethod": "GET",
-      "requestUrl": "http://srv.{{ .EchoNamespace }}.svc.cluster.local/foo",
-      "status": 200,
-      "protocol": "http"
-    },
-    "labels": {
-      "source_app": "clt-{{ .ClusterName }}",
-      "destination_canonical_service": "srv",
-      "destination_workload": "srv-v1",
-      "destination_service_host": "srv.{{ .EchoNamespace }}.svc.cluster.local",
-      "destination_app": "srv",
-      "source_canonical_service": "clt-{{ .ClusterName }}",
-      "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-      "destination_namespace": "{{ .EchoNamespace }}",
-      "destination_canonical_revision": "v1",
-      "source_workload": "clt-{{ .ClusterName }}-v1",
-      "source_namespace": "{{ .EchoNamespace }}",
-      "destination_service_name": "srv",
-      "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-      "source_canonical_revision": "v1"
-    },
-    "trace_sampled":true
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/v1beta1-audit-authorization-policy.yaml.tmpl b/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/v1beta1-audit-authorization-policy.yaml.tmpl
deleted file mode 100644
index 5c788a513d..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/security_authz_audit/v1beta1-audit-authorization-policy.yaml.tmpl
+++ /dev/null
@@ -1,23 +0,0 @@
-apiVersion: security.istio.io/v1beta1
-kind: AuthorizationPolicy
-metadata:
-  namespace: "{{ .Namespace }}"
-  name: "audit-by-path-and-request-header"
-spec:
-  action: AUDIT
-  rules:
-  - to:
-    - operation:
-        paths: ["/audit-all"]
-  - to:
-    - operation:
-        paths: ["/foo"]
-    when:
-    - key: request.headers[X-Header]
-      values: ["foo"]
-  - to:
-    - operation:
-        paths: ["/bar"]
-    when:
-    - key: request.headers[X-Header]
-      values: ["bar"]
diff --git a/tests/integration/telemetry/stackdriver/testdata/server_access_log.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/server_access_log.json.tmpl
deleted file mode 100644
index 040101d3f4..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/server_access_log.json.tmpl
+++ /dev/null
@@ -1,35 +0,0 @@
-{
-    "http_request": {
-        "request_method": "POST",
-        "request_url": "http://srv.{{ .EchoNamespace }}.svc.cluster.local/proto.EchoTestService/Echo",
-        "protocol": "grpc",
-        "status": "200"
-    },
-    "labels": {
-        "destination_app": "srv",
-        "destination_canonical_revision": "v1",
-        "destination_canonical_service": "srv",
-        "destination_namespace": "{{ .EchoNamespace }}",
-        "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "destination_service_host": "srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "destination_service_name": "srv",
-        "destination_version": "v1",
-        "destination_workload": "srv-v1",
-        "mesh_uid": "proj-test-mesh",
-        "response_flag": "-",
-        "service_authentication_policy": "MUTUAL_TLS",
-        "source_app": "clt-{{ .ClusterName }}",
-        "source_canonical_revision": "v1",
-        "source_canonical_service": "clt-{{ .ClusterName }}",
-        "source_namespace": "{{ .EchoNamespace }}",
-        "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "source_version": "v1",
-        "source_workload": "clt-{{ .ClusterName }}-v1",
-        "protocol": "grpc",
-        "log_sampled": "true",
-        "upstream_cluster": "inbound|7070||",
-        "route_name": "default",
-        "requested_server_name": "outbound_.7070_._.srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "response_details": "via_upstream"
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/server_request_count.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/server_request_count.json.tmpl
deleted file mode 100644
index ab09dc2ccd..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/server_request_count.json.tmpl
+++ /dev/null
@@ -1,38 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/server/request_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "srv",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-          "destination_port": "7070",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "srv",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "srv-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "proj-test-mesh",
-          "request_operation": "/proto.EchoTestService/Echo",
-          "request_protocol": "grpc",
-          "response_code": "200",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "clt-{{ .ClusterName }}",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "service_authentication_policy": "MUTUAL_TLS",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-{{ .ClusterName }}-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "clt-{{ .ClusterName }}-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    },
-    {{- if .OnGCE }}
-    "resource": {
-       "labels": {
-          "container_name": "app",
-          "namespace_name": "{{ .EchoNamespace }}"
-       },
-       "type": "k8s_container"
-    }
-    {{- end }}
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/server_tcp_connection_count.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/server_tcp_connection_count.json.tmpl
deleted file mode 100644
index 72b0a33359..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/server_tcp_connection_count.json.tmpl
+++ /dev/null
@@ -1,36 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/server/connection_open_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "srv",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-          "destination_port": "9000",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "srv",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "srv-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "proj-test-mesh",
-          "request_protocol": "tcp",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "clt-{{ .ClusterName }}",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "service_authentication_policy": "MUTUAL_TLS",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-{{ .ClusterName }}-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "clt-{{ .ClusterName }}-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    },
-    {{- if .OnGCE }}
-    "resource": {
-       "labels": {
-          "container_name": "app",
-          "namespace_name": "{{ .EchoNamespace }}"
-       },
-       "type": "k8s_container"
-    }
-    {{- end }}
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/tcp_server_access_log.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/tcp_server_access_log.json.tmpl
deleted file mode 100644
index 2a733ceb3d..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/tcp_server_access_log.json.tmpl
+++ /dev/null
@@ -1,29 +0,0 @@
-{
-    "text_payload": "clt-{{ .ClusterName }} --> srv",
-    "labels": {
-        "destination_app": "srv",
-        "destination_canonical_revision": "v1",
-        "destination_canonical_service": "srv",
-        "destination_namespace": "{{ .EchoNamespace }}",
-        "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "destination_service_host": "srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "destination_service_name": "srv",
-        "destination_version": "v1",
-        "destination_workload": "srv-v1",
-        "destination_port": "9000",
-        "mesh_uid": "proj-test-mesh",
-        "response_flag": "-",
-        "service_authentication_policy": "MUTUAL_TLS",
-        "source_app": "clt-{{ .ClusterName }}",
-        "source_canonical_revision": "v1",
-        "source_canonical_service": "clt-{{ .ClusterName }}",
-        "source_namespace": "{{ .EchoNamespace }}",
-        "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "source_version": "v1",
-        "source_workload": "clt-{{ .ClusterName }}-v1",
-        "protocol": "tcp",
-        "log_sampled": "false",
-        "requested_server_name": "outbound_.9090_._.srv.{{ .EchoNamespace }}.svc.cluster.local",
-        "upstream_cluster": "inbound|9000||"
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/testdata/traffic_assertion.json.tmpl b/tests/integration/telemetry/stackdriver/testdata/traffic_assertion.json.tmpl
deleted file mode 100644
index 0e0912fe31..0000000000
--- a/tests/integration/telemetry/stackdriver/testdata/traffic_assertion.json.tmpl
+++ /dev/null
@@ -1,18 +0,0 @@
-{
-    "source": {
-        "owner_uid": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/clt-{{ .ClusterName }}-v1",
-        "workload_name": "clt-{{ .ClusterName }}-v1",
-        "workload_namespace": "{{ .EchoNamespace }}",
-        "canonical_service": "clt-{{ .ClusterName }}",
-        "canonical_revision": "v1"
-    },
-    "destination": {
-        "owner_uid": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/srv-v1",
-        "workload_name": "srv-v1",
-        "workload_namespace": "{{ .EchoNamespace }}",
-        "canonical_service": "srv",
-        "canonical_revision": "v1"
-    },
-    "destination_service_name": "srv",
-    "destination_service_namespace": "{{ .EchoNamespace }}"
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/main_test.go b/tests/integration/telemetry/stackdriver/vm/main_test.go
deleted file mode 100644
index 5b61a27759..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/main_test.go
+++ /dev/null
@@ -1,331 +0,0 @@
-// +build integ
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package vm
-
-import (
-	"fmt"
-	"io/ioutil"
-	"testing"
-
-	"github.com/gogo/protobuf/jsonpb"
-	"github.com/gogo/protobuf/proto"
-	"google.golang.org/genproto/googleapis/devtools/cloudtrace/v1"
-	loggingpb "google.golang.org/genproto/googleapis/logging/v2"
-	monitoring "google.golang.org/genproto/googleapis/monitoring/v3"
-
-	"istio.io/api/annotation"
-	"istio.io/istio/pkg/config/protocol"
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/echoboot"
-	"istio.io/istio/pkg/test/framework/components/gcemetadata"
-	"istio.io/istio/pkg/test/framework/components/istio"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/components/stackdriver"
-	edgespb "istio.io/istio/pkg/test/framework/components/stackdriver/edges"
-	"istio.io/istio/pkg/test/framework/resource"
-	"istio.io/istio/pkg/test/util/tmpl"
-)
-
-const (
-	// testdata, including golden files
-	stackdriverBootstrapOverride = "../testdata/custom_bootstrap.yaml.tmpl"
-	serverRequestCount           = "testdata/server_request_count.json.tmpl"
-	clientRequestCount           = "testdata/client_request_count.json.tmpl"
-	serverLogEntry               = "testdata/server_access_log.json.tmpl"
-	serverEdgeFile               = "testdata/server_edge.prototext.tmpl"
-	traceTmplFile                = "testdata/trace.prototext.tmpl"
-	sdBootstrapConfigMap         = "stackdriver-bootstrap-config"
-)
-
-var (
-	istioInst istio.Instance
-	ns        namespace.Instance
-	gceInst   gcemetadata.Instance
-	sdInst    stackdriver.Instance
-	server    echo.Instance
-	client    echo.Instance
-	vmEnv     map[string]string
-)
-
-var (
-	// golden values for tests
-	wantServerReqs       *monitoring.TimeSeries
-	wantClientReqs       *monitoring.TimeSeries
-	wantLogEntry         *loggingpb.LogEntry
-	wantTrafficAssertion *edgespb.TrafficAssertion
-	wantTrace            *cloudtrace.Trace
-)
-
-var (
-	clientBuilder, serverBuilder echo.Builder
-)
-
-var (
-	proxyConfigAnnotation = echo.Annotation{
-		Name: annotation.ProxyConfig.Name,
-		Type: echo.WorkloadAnnotation,
-	}
-
-	envTagsProxyConfig = `
-tracing:
-  stackdriver:
-    debug: true
-  sampling: 100.0`
-)
-
-const enforceMTLS = `
-apiVersion: security.istio.io/v1beta1
-kind: PeerAuthentication
-metadata:
-  name: default
-spec:
-  mtls:
-    mode: STRICT
----
-apiVersion: networking.istio.io/v1alpha3
-kind: DestinationRule
-metadata:
-  name: send-mtls
-spec:
-  host: "*.svc.cluster.local"
-  trafficPolicy:
-    tls:
-      mode: ISTIO_MUTUAL
-`
-
-// Testing telemetry with VM mesh expansion on a simulated GCE instance.
-// Rather than deal with the infra to get a real VM, we will use a pod
-// with no Service, no DNS, no service account, etc to simulate a VM.
-//
-// This test setup borrows heavily from the following packages:
-// - tests/integration/pilot/vm
-// - tests/integration/telemetry/stackdriver
-func TestMain(m *testing.M) {
-	framework.
-		NewSuite(m).
-		RequireSingleCluster().
-		Setup(istio.Setup(&istioInst, func(_ resource.Context, cfg *istio.Config) {
-			cfg.Values["meshConfig.enableTracing"] = "true"
-			cfg.Values["meshConfig.defaultConfig.tracing.sampling"] = "100.0"
-			cfg.Values["global.meshID"] = "proj-test-mesh"
-			cfg.Values["global.proxy.tracer"] = "stackdriver"
-			cfg.Values["telemetry.v2.enabled"] = "true"
-			cfg.Values["telemetry.v2.stackdriver.enabled"] = "true"
-			cfg.Values["telemetry.v2.stackdriver.logging"] = "true"
-			cfg.Values["telemetry.v2.stackdriver.configOverride.meshEdgesReportingDuration"] = "5s"
-			cfg.Values["telemetry.v2.stackdriver.configOverride.enable_mesh_edges_reporting"] = "true"
-		})).
-		Setup(testSetup).
-		Run()
-}
-
-func testSetup(ctx resource.Context) error {
-	var err error
-
-	if ns, err = namespace.New(ctx, namespace.Config{
-		Prefix: "istio-echo",
-		Inject: true,
-	}); err != nil {
-		return err
-	}
-
-	if gceInst, err = gcemetadata.New(ctx, gcemetadata.Config{}); err != nil {
-		return err
-	}
-
-	if sdInst, err = stackdriver.New(ctx, stackdriver.Config{}); err != nil {
-		return err
-	}
-
-	templateBytes, err := ioutil.ReadFile(stackdriverBootstrapOverride)
-	if err != nil {
-		return err
-	}
-	sdBootstrap, err := tmpl.Evaluate(string(templateBytes), map[string]interface{}{
-		"StackdriverAddress": sdInst.Address(),
-		"EchoNamespace":      ns.Name(),
-	})
-	if err != nil {
-		return err
-	}
-
-	if err = ctx.Config().ApplyYAML(ns.Name(), sdBootstrap); err != nil {
-		return err
-	}
-
-	vmLabelsJSON := "{\\\"service.istio.io/canonical-name\\\":\\\"vm-server\\\",\\\"service.istio.io/canonical-revision\\\":\\\"v1\\\"}"
-
-	vmEnv = map[string]string{
-		"ISTIO_META_INSECURE_STACKDRIVER_ENDPOINT":               sdInst.Address(),
-		"ISTIO_META_STACKDRIVER_MONITORING_EXPORT_INTERVAL_SECS": "10",
-		"ISTIO_META_MESH_ID":                                     "proj-test-mesh",
-		"ISTIO_META_WORKLOAD_NAME":                               "vm-server-v1",
-		"ISTIO_METAJSON_LABELS":                                  vmLabelsJSON,
-		"GCE_METADATA_HOST":                                      gceInst.Address(),
-		"CANONICAL_SERVICE":                                      "vm-server",
-		"CANONICAL_REVISION":                                     "v1",
-		// we must supply a bootstrap override to get the test endpoint uri into the tracing configuration
-		"ISTIO_BOOTSTRAP_OVERRIDE": "/etc/istio/custom-bootstrap/custom_bootstrap.json",
-	}
-
-	// read expected values from testdata
-	wantClientReqs, wantServerReqs, err = goldenRequestCounts()
-	if err != nil {
-		return fmt.Errorf("failed to get golden metrics from file: %v", err)
-	}
-	wantLogEntry, err = goldenLogEntry()
-	if err != nil {
-		return fmt.Errorf("failed to get golden log entry from file: %v", err)
-	}
-	wantTrafficAssertion, err = goldenTrafficAssertion()
-	if err != nil {
-		return fmt.Errorf("failed to get golden traffic assertion from file: %v", err)
-	}
-	wantTrace, err = goldenTrace()
-	if err != nil {
-		return fmt.Errorf("failed to get golden trace from file: %v", err)
-	}
-
-	// set up client and server
-	ports := []echo.Port{
-		{
-			Name:     "http",
-			Protocol: protocol.HTTP,
-			// Due to a bug in WorkloadEntry, service port must equal target port for now
-			InstancePort: 8090,
-			ServicePort:  8090,
-		},
-	}
-
-	// builder to build the instances iteratively
-	clientBuilder = echoboot.NewBuilder(ctx).
-		With(&client, echo.Config{
-			Service:   "client",
-			Namespace: ns,
-			Ports:     ports,
-			Subsets: []echo.SubsetConfig{
-				{
-					Annotations: echo.NewAnnotations().Set(echo.SidecarBootstrapOverride, sdBootstrapConfigMap),
-				},
-			},
-		})
-
-	serverBuilder = echoboot.NewBuilder(ctx).
-		With(&server, echo.Config{
-			Service:       "server",
-			Namespace:     ns,
-			Ports:         ports,
-			DeployAsVM:    true,
-			VMEnvironment: vmEnv,
-			Subsets: []echo.SubsetConfig{
-				{
-					Annotations: echo.NewAnnotations().
-						Set(proxyConfigAnnotation, envTagsProxyConfig).
-						Set(echo.SidecarBootstrapOverride, sdBootstrapConfigMap),
-				},
-			},
-		})
-
-	return nil
-}
-
-func goldenRequestCounts() (cltRequestCount, srvRequestCount *monitoring.TimeSeries, err error) {
-	srvRequestCountTmpl, err := ioutil.ReadFile(serverRequestCount)
-	if err != nil {
-		return
-	}
-	sr, err := tmpl.Evaluate(string(srvRequestCountTmpl), map[string]interface{}{
-		"EchoNamespace": ns.Name(),
-	})
-	if err != nil {
-		return
-	}
-	cltRequestCount = &monitoring.TimeSeries{}
-	srvRequestCount = &monitoring.TimeSeries{}
-	if err = jsonpb.UnmarshalString(sr, srvRequestCount); err != nil {
-		return
-	}
-	cltRequestCountTmpl, err := ioutil.ReadFile(clientRequestCount)
-	if err != nil {
-		return
-	}
-	cr, err := tmpl.Evaluate(string(cltRequestCountTmpl), map[string]interface{}{
-		"EchoNamespace": ns.Name(),
-	})
-	if err != nil {
-		return
-	}
-	err = jsonpb.UnmarshalString(cr, cltRequestCount)
-	return
-}
-
-func goldenLogEntry() (srvLogEntry *loggingpb.LogEntry, err error) {
-	srvlogEntryTmpl, err := ioutil.ReadFile(serverLogEntry)
-	if err != nil {
-		return
-	}
-	sr, err := tmpl.Evaluate(string(srvlogEntryTmpl), map[string]interface{}{
-		"EchoNamespace": ns.Name(),
-	})
-	if err != nil {
-		return
-	}
-	srvLogEntry = &loggingpb.LogEntry{}
-	if err = jsonpb.UnmarshalString(sr, srvLogEntry); err != nil {
-		return
-	}
-	return
-}
-
-func goldenTrafficAssertion() (*edgespb.TrafficAssertion, error) {
-	taTmpl, err := ioutil.ReadFile(serverEdgeFile)
-	if err != nil {
-		return nil, err
-	}
-
-	taString, err := tmpl.Evaluate(string(taTmpl), map[string]interface{}{
-		"EchoNamespace": ns.Name(),
-	})
-	if err != nil {
-		return nil, err
-	}
-
-	var ta edgespb.TrafficAssertion
-	if err = proto.UnmarshalText(taString, &ta); err != nil {
-		return nil, err
-	}
-	return &ta, nil
-}
-
-func goldenTrace() (*cloudtrace.Trace, error) {
-	traceTmpl, err := ioutil.ReadFile(traceTmplFile)
-	if err != nil {
-		return nil, err
-	}
-	traceStr, err := tmpl.Evaluate(string(traceTmpl), map[string]interface{}{
-		"EchoNamespace": ns.Name(),
-	})
-	if err != nil {
-		return nil, err
-	}
-	var trace cloudtrace.Trace
-	if err = proto.UnmarshalText(traceStr, &trace); err != nil {
-		return nil, err
-	}
-
-	return &trace, nil
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/testdata/client_request_count.json.tmpl b/tests/integration/telemetry/stackdriver/vm/testdata/client_request_count.json.tmpl
deleted file mode 100644
index 1c677d4a83..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/testdata/client_request_count.json.tmpl
+++ /dev/null
@@ -1,29 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/client/request_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "vm-server",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "//compute.googleapis.com/some-creator",
-          "destination_port": "8090",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "server",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "vm-server-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "proj-test-mesh",
-          "request_operation": "GET",
-          "request_protocol": "http",
-          "response_code": "200",
-          "service_authentication_policy": "unknown",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "client",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/client-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "client-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/testdata/server_access_log.json.tmpl b/tests/integration/telemetry/stackdriver/vm/testdata/server_access_log.json.tmpl
deleted file mode 100644
index c22cb3f301..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/testdata/server_access_log.json.tmpl
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-    "trace_sampled": true,
-    "http_request": {
-        "request_method": "GET",
-        "request_url": "http://server.{{ .EchoNamespace }}.svc.cluster.local/",
-        "protocol": "http",
-        "status": "200"
-    },
-    "labels": {
-        "destination_canonical_revision": "v1",
-        "destination_canonical_service": "vm-server",
-        "destination_namespace": "{{ .EchoNamespace }}",
-        "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "destination_service_host": "server.{{ .EchoNamespace }}.svc.cluster.local",
-        "destination_service_name": "server",
-        "destination_workload": "vm-server-v1",
-        "mesh_uid": "proj-test-mesh",
-        "response_flag": "-",
-        "service_authentication_policy": "MUTUAL_TLS",
-        "source_app": "client",
-        "source_canonical_revision": "v1",
-        "source_canonical_service": "client",
-        "source_namespace": "{{ .EchoNamespace }}",
-        "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-        "source_version": "v1",
-        "source_workload": "client-v1",
-        "protocol": "http",
-        "log_sampled": "false",
-        "upstream_cluster": "inbound|8090||",
-        "route_name": "default",
-        "requested_server_name": "outbound_.8090_._.server.{{ .EchoNamespace }}.svc.cluster.local",
-        "response_details": "via_upstream"
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/testdata/server_edge.prototext.tmpl b/tests/integration/telemetry/stackdriver/vm/testdata/server_edge.prototext.tmpl
deleted file mode 100644
index 752f73d444..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/testdata/server_edge.prototext.tmpl
+++ /dev/null
@@ -1,15 +0,0 @@
-source:<
-  owner_uid:"kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/client-v1"
-  workload_name:"client-v1"
-  workload_namespace:"{{ .EchoNamespace }}"
-  canonical_service:"client" canonical_revision:"v1" > 
-destination:<
-  location:"us-west1-c"
-  owner_uid:"//compute.googleapis.com/some-creator"
-  workload_name:"vm-server-v1"
-  workload_namespace:"{{ .EchoNamespace }}"
-  canonical_service:"vm-server"
-  canonical_revision:"v1" > 
-protocol: 1
-destination_service_name:"server"
-destination_service_namespace:"{{ .EchoNamespace }}" 
\ No newline at end of file
diff --git a/tests/integration/telemetry/stackdriver/vm/testdata/server_request_count.json.tmpl b/tests/integration/telemetry/stackdriver/vm/testdata/server_request_count.json.tmpl
deleted file mode 100644
index feb41aea54..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/testdata/server_request_count.json.tmpl
+++ /dev/null
@@ -1,29 +0,0 @@
-{
-    "metric": {
-       "type": "istio.io/service/server/request_count",
-       "labels": {
-          "destination_canonical_revision": "v1",
-          "destination_canonical_service_name": "vm-server",
-          "destination_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "destination_owner": "//compute.googleapis.com/some-creator",
-          "destination_port": "8090",
-          "destination_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "destination_service_name": "server",
-          "destination_service_namespace": "{{ .EchoNamespace }}",
-          "destination_workload_name": "vm-server-v1",
-          "destination_workload_namespace": "{{ .EchoNamespace }}",
-          "mesh_uid": "proj-test-mesh",
-          "request_operation": "GET",
-          "request_protocol": "http",
-          "response_code": "200",
-          "service_authentication_policy": "MUTUAL_TLS",
-          "source_canonical_revision": "v1",
-          "source_canonical_service_name": "client",
-          "source_canonical_service_namespace": "{{ .EchoNamespace }}",
-          "source_owner": "kubernetes://apis/apps/v1/namespaces/{{ .EchoNamespace }}/deployments/client-v1",
-          "source_principal": "spiffe://cluster.local/ns/{{ .EchoNamespace }}/sa/default",
-          "source_workload_name": "client-v1",
-          "source_workload_namespace": "{{ .EchoNamespace }}"
-       }
-    }
-}
diff --git a/tests/integration/telemetry/stackdriver/vm/testdata/trace.prototext.tmpl b/tests/integration/telemetry/stackdriver/vm/testdata/trace.prototext.tmpl
deleted file mode 100644
index 36f0ef7cc2..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/testdata/trace.prototext.tmpl
+++ /dev/null
@@ -1,35 +0,0 @@
-project_id:"projects/test-project"
-spans:{ 
-    labels:{key:"OperationName"  value:"Ingress"}
-    labels:{key:"component"  value:"proxy"}
-    labels:{key:"downstream_cluster"  value:"-"}
-    labels:{key:"http.method"  value:"GET"} 
-    labels:{key:"http.protocol"  value:"HTTP/1.1"}
-    labels:{key:"http.status_code"  value:"200"}
-    labels:{key:"http.url"  value:"http://server.{{ .EchoNamespace }}.svc.cluster.local/"}
-    labels:{key:"istio.canonical_service"  value:"vm-server"}
-    labels:{key:"istio.canonical_revision"  value:"v1"}
-    labels:{key:"istio.mesh_id"  value:"proj-test-mesh"}
-    labels:{key:"istio.namespace"  value:"{{ .EchoNamespace }}"}
-    labels:{key:"request_size"  value:"0"}
-    labels:{key:"response_flags"  value:"-"}
-    labels:{key:"span"  value:"server.{{ .EchoNamespace }}.svc.cluster.local:8090/*"}
-    labels:{key:"upstream_cluster"  value:"inbound|8090||"}
-    labels:{key:"user_agent"  value:"Go-http-client/1.1"}}
-spans:{
-    labels:{key:"OperationName" value:"Egress"}
-    labels:{key:"component"  value:"proxy"}
-    labels:{key:"downstream_cluster"  value:"-"}
-    labels:{key:"http.method"  value:"GET"}
-    labels:{key:"http.protocol"  value:"HTTP/1.1"}
-    labels:{key:"http.status_code"  value:"200"}
-    labels:{key:"http.url"  value:"http://server.{{ .EchoNamespace }}.svc.cluster.local/"}
-    labels:{key:"istio.canonical_service"  value:"client"}
-    labels:{key:"istio.canonical_revision"  value:"v1"}
-    labels:{key:"istio.mesh_id"  value:"proj-test-mesh"}
-    labels:{key:"istio.namespace"  value:"{{ .EchoNamespace }}"}
-    labels:{key:"request_size"  value:"0"}
-    labels:{key:"response_flags"  value:"-"}
-    labels:{key:"span"  value:"server.{{ .EchoNamespace }}.svc.cluster.local:8090/*"}
-    labels:{key:"upstream_cluster"  value:"outbound|8090||server.{{ .EchoNamespace }}.svc.cluster.local"}
-    labels:{key:"user_agent"  value:"Go-http-client/1.1"}}
diff --git a/tests/integration/telemetry/stackdriver/vm/vm_test.go b/tests/integration/telemetry/stackdriver/vm/vm_test.go
deleted file mode 100644
index 010c1eda2b..0000000000
--- a/tests/integration/telemetry/stackdriver/vm/vm_test.go
+++ /dev/null
@@ -1,193 +0,0 @@
-// +build integ
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package vm
-
-import (
-	"fmt"
-	"reflect"
-	"strings"
-	"testing"
-	"time"
-
-	"github.com/golang/protobuf/proto"
-	"github.com/google/go-cmp/cmp"
-	"google.golang.org/genproto/googleapis/devtools/cloudtrace/v1"
-	loggingpb "google.golang.org/genproto/googleapis/logging/v2"
-	monitoring "google.golang.org/genproto/googleapis/monitoring/v3"
-	"google.golang.org/protobuf/testing/protocmp"
-
-	"istio.io/istio/pkg/test/framework"
-	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/stackdriver"
-	edgespb "istio.io/istio/pkg/test/framework/components/stackdriver/edges"
-	"istio.io/istio/pkg/test/util/retry"
-	"istio.io/pkg/log"
-)
-
-func TestVMTelemetry(t *testing.T) {
-	framework.
-		NewTest(t).
-		Features("observability.telemetry.stackdriver").
-		Run(func(ctx framework.TestContext) {
-			// Set up strict mTLS. This gives a bit more assurance the calls are actually going through envoy,
-			// and certs are set up correctly.
-			ctx.Config().ApplyYAMLOrFail(ctx, ns.Name(), enforceMTLS)
-
-			clientBuilder.BuildOrFail(t)
-			serverBuilder.BuildOrFail(t)
-
-			retry.UntilSuccessOrFail(t, func() error {
-				// send single request from client -> server
-				if _, err := client.Call(echo.CallOptions{Target: server, PortName: "http", Count: 1}); err != nil {
-					return err
-				}
-
-				// Verify stackdriver metrics
-				gotMetrics := gotRequestCountMetrics(wantClientReqs, wantServerReqs)
-
-				// Verify log entry
-				gotLogs := gotLogEntry(wantLogEntry)
-
-				// Verify edges
-				gotEdges := gotTrafficAssertion(wantTrafficAssertion)
-
-				// verify traces
-				gotTraces := gotTrace(wantTrace)
-
-				if !(gotMetrics && gotLogs && gotEdges && gotTraces) {
-					return fmt.Errorf("did not receive all expected telemetry; status: metrics=%t, logs=%t, edges=%t, traces=%t", gotMetrics, gotLogs, gotEdges, gotTraces)
-				}
-
-				return nil
-			}, retry.Delay(3*time.Second), retry.Timeout(40*time.Second))
-		})
-}
-
-func traceEqual(got, want *cloudtrace.Trace) bool {
-	if len(got.Spans) != len(want.Spans) {
-		log.Infof("incorrect number of spans: got %d, want: %d", len(got.Spans), len(want.Spans))
-		return false
-	}
-	if got.ProjectId != want.ProjectId {
-		log.Errorf("mismatched project ids: got %q, want %q", got.ProjectId, want.ProjectId)
-		return false
-	}
-
-	for _, wantSpan := range want.Spans {
-		foundSpan := false
-		for _, gotSpan := range got.Spans {
-			delete(gotSpan.Labels, "guid:x-request-id")
-			delete(gotSpan.Labels, "node_id")
-			delete(gotSpan.Labels, "peer.address")
-			delete(gotSpan.Labels, "zone")
-			delete(gotSpan.Labels, "g.co/agent")    // ignore OpenCensus lib versions
-			delete(gotSpan.Labels, "response_size") // this could be slightly off, just ignore
-			if foundSpan = reflect.DeepEqual(gotSpan.Labels, wantSpan.Labels); foundSpan {
-				break
-			}
-		}
-		if !foundSpan {
-			log.Errorf("missing span from trace: got %v\nwant %v", got, want)
-			return false
-		}
-	}
-
-	return true
-}
-
-func gotRequestCountMetrics(wantClient, wantServer *monitoring.TimeSeries) bool {
-	ts, err := sdInst.ListTimeSeries()
-	if err != nil {
-		log.Errorf("could not get list of time-series from stackdriver: %v", err)
-		return false
-	}
-
-	var gotServer, gotClient bool
-	for _, series := range ts {
-		// Making resource nil, as test can run on various platforms.
-		series.Resource = nil
-		if proto.Equal(series, wantServer) {
-			gotServer = true
-		}
-		if proto.Equal(series, wantClient) {
-			gotClient = true
-		}
-	}
-
-	return gotServer && gotClient
-}
-
-func gotLogEntry(want *loggingpb.LogEntry) bool {
-	entries, err := sdInst.ListLogEntries(stackdriver.ServerAccessLog)
-	if err != nil {
-		log.Errorf("failed to get list of log entries from stackdriver: %v", err)
-		return false
-	}
-	for _, l := range entries {
-		l.Trace = ""
-		l.SpanId = ""
-		if proto.Equal(l, want) {
-			return true
-		}
-		log.Errorf("incorrect log: got %v\nwant %v", l, want)
-	}
-	return false
-}
-
-func gotTrafficAssertion(want *edgespb.TrafficAssertion) bool {
-	edges, err := sdInst.ListTrafficAssertions()
-	if err != nil {
-		log.Errorf("failed to get traffic assertions from stackdriver: %v", err)
-		return false
-	}
-
-	for _, ta := range edges {
-		srcUID := ta.Source.Uid
-		dstUID := ta.Destination.Uid
-
-		ta.Source.Location = ""
-		ta.Source.ClusterName = ""
-		ta.Source.Uid = ""
-		ta.Destination.Uid = ""
-
-		if diff := cmp.Diff(ta, want, protocmp.Transform()); diff != "" {
-			log.Errorf("different edge found: %v", diff)
-			continue
-		}
-
-		if strings.HasPrefix(dstUID, "//compute.googleapis.com/projects/test-project/zones/us-west1-c/instances/server-v1-") &&
-			strings.HasPrefix(srcUID, "kubernetes://client-v1-") {
-			return true
-		}
-	}
-
-	return false
-}
-
-func gotTrace(want *cloudtrace.Trace) bool {
-	traces, err := sdInst.ListTraces()
-	if err != nil {
-		log.Errorf("failed to retrieve list of tracespans from stackdriver: %v", err)
-		return false
-	}
-
-	for _, trace := range traces {
-		if found := traceEqual(trace, want); found {
-			return true
-		}
-	}
-	return false
-}
